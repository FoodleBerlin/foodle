// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// To visualize the db schema run 'npx prisma generate' => a schema.dbml file is generated, insert it into https://dbdiagram.io
generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://foodle:foodle@localhost:5431"
}

enum ModelKind {
  user
  property
  booking
  bookingDay
  propertyAvailability
  facility
  payment
  paymentMethod
  bookingSlot
  propertySlot
  daySlot
}

enum Frequency {
  none
  weekly
  monthly
}

enum WeekDay {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

enum PaymentType {
  reservation
  fee
  refund
}

enum PaymentStatus {
  pending
  paid
  rejected
}

enum Role {
  tenant
  landlord
  tenantLandlord
}

enum BookingStatus {
  accepted
  pending
  rejected
}

model User {
  kind             ModelKind  @default(user)
  handle           String     @unique
  fullName         String
  stripeId         String?    @unique
  email            String     @unique
  id               String     @id @default(cuid())
  image            String?
  dob              DateTime?
  zip              Int?
  description      String?
  isVerified       Boolean    @default(false)
  role             Role
  bookings         Booking[]  @relation("tenant")
  rentingOut       Property[] @relation("owner")
  superOwner       Boolean    @default(false)
  passportS3Id     String?
  passportVerified Boolean    @default(false)
  licenseS3Id      String?
  licenseVerified  Boolean    @default(false)
  solvencyS3Id     String?
  solvencyVerified Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model DaySlot {
  kind            ModelKind    @default(daySlot)
  id              String       @id @default(cuid())
  date            DateTime
  // Must be the same day
  startTime       DateTime
  endTime         DateTime
  // booked startTime and endTime always needs to be added manually during
  // the create booking mutation if booking id is null
  bookedStartTime DateTime?
  bookedEndTime   DateTime?
  // Parent property
  propertySlotId  String
  propertySlot    PropertySlot @relation("propertySlotToDaySlot", fields: [propertySlotId], references: [id], onDelete: Cascade)
  // Property slots might have a corresponding booking
  // Will be null if it is available
  bookingId       String?
  booking         Booking?     @relation("daySlotToBooking", fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([date, propertySlotId])
  @@index([date])
  @@index([propertySlotId])
}

model Property {
  kind          ModelKind      @default(property)
  id            String         @id @default(cuid())
  handle        String         @unique
  title         String
  size          Int // will be sq.ft
  ownerId       String
  owner         User           @relation(name: "owner", fields: [ownerId], references: [id], onDelete: Cascade)
  bookings      Booking[]      @relation("property")
  street        String
  streetNumber  Int
  zip           Int
  city          String
  description   String
  pickup        Boolean        @default(false)
  facilities    String[]
  isVerified    Boolean        @default(false)
  hourlyPrice   Int // => decimal
  serviceFee    Int
  rules         String[]
  deposit       Int
  images        String[]
  partialSpace  Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  availabilites PropertySlot[] @relation("propertySlotToProperty")

  @@index([handle])
}

model PropertySlot {
  kind          ModelKind @default(propertySlot)
  id            String    @id @default(cuid())
  // minimumBookings Int       @default(0)
  availableDays DaySlot[] @relation("propertySlotToDaySlot")
  frequency     Frequency
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  propertyId    String
  weekdays      WeekDay[]
  property      Property  @relation("propertySlotToProperty", fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
}

model Booking {
  kind          ModelKind     @default(booking)
  id            String        @id @default(cuid())
  tenantId      String
  tenant        User          @relation(name: "tenant", fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId    String
  property      Property      @relation(name: "property", fields: [propertyId], references: [id], onDelete: Cascade)
  bookingStatus BookingStatus
  totalPrice    Decimal       @default(0)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  // weekdays      WeekDay[] => not necessary?
  daySlots      DaySlot[]     @relation("daySlotToBooking")
  frequency     Frequency

}
