// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ModelKind {
  user
  property
  booking
  bookingDay
  propertyAvailability
  facility
  payment
  paymentMethod
  genericDaySlot
  bookingSlot
  propertySlot
}

enum DayOfWeek {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

enum Frequency {
  none
  weekly
  biweekly
  triweekly
}

enum PaymentType {
  reservation
  fee
  refund
}

enum PaymentStatus {
  pending
  paid
  rejected
}

enum Role {
  tenant
  landlord
  tenantLandlord
}

enum BookingStatus {
  accepted
  pending
  rejected
}

model User {
  kind             ModelKind  @default(user)
  handle           String     @unique
  fullName         String
  stripeId         String?    @unique
  email            String     @unique
  id               String     @id @default(cuid())
  image            String?
  dob              DateTime?
  zip              Int?
  description      String?
  isVerified       Boolean    @default(false)
  role             Role
  bookings         Booking[]  @relation("tenant")
  rentingOut       Property[] @relation("owner")
  superOwner       Boolean    @default(false)
  passportS3Id     String?
  passportVerified Boolean    @default(false)
  licenseS3Id      String?
  licenseVerified  Boolean    @default(false)
  solvencyS3Id     String?
  solvencyVerified Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model PropertySlot {
  kind          ModelKind        @default(propertySlot)
  id            String           @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  minMonths     Int              @default(0)
  availableDays GenericDaySlot[] @relation("propertyToGenericSlot")
  frequency     Frequency
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  propertyId    String           @unique
  property      Property         @relation("propertySlotToProperty", fields: [propertyId], references: [id])
}

model GenericDaySlot {
  kind           ModelKind     @default(genericDaySlot)
  id             String        @id @default(cuid())
  startTime      DateTime
  endTime        DateTime
  weekday        String
  propertySlotId String
  propertSlot    PropertySlot? @relation("propertyToGenericSlot", fields: [propertySlotId], references: [id])
  bookingSlotId  String?
  bookingSlot    BookingSlot?  @relation("bookingToGenericSlot", fields: [bookingSlotId], references: [id])
}

//title: string, unique handle => lowercase title unique
model Property {
  kind           ModelKind     @default(property)
  id             String        @id @default(cuid())
  handle         String        @unique
  title          String
  size           Int // will be sq.ft
  ownerId        String
  owner          User          @relation(name: "owner", fields: [ownerId], references: [id])
  bookings       Booking[]     @relation("property")
  street         String
  streetNumber   Int
  zip            Int
  city           String
  description    String
  pickup         Boolean       @default(false)
  facilities     String[]
  isVerified     Boolean       @default(false)
  hourlyPrice    Int
  serviceFee     Int
  rules          String[]
  deposit        Int
  images         String[]
  partialSpace   Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  availabilities PropertySlot? @relation("propertySlotToProperty")
}

model BookingSlot {
  kind       ModelKind        @default(bookingSlot)
  id         String           @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  bookedDays GenericDaySlot[] @relation("bookingToGenericSlot")
  frequency  Frequency
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  bookingId  String
  booking    Booking          @relation("bookingSlotToBooking", fields: [bookingId], references: [id])
}

model Booking {
  kind          ModelKind     @default(booking)
  id            String        @id @default(cuid())
  tenantId      String
  tenant        User          @relation(name: "tenant", fields: [tenantId], references: [id])
  propertyId    String
  property      Property      @relation(name: "property", fields: [propertyId], references: [id])
  bookingStatus BookingStatus
  totalPrice    Int           @default(0)
  startDate     DateTime
  endDate       DateTime
  bookingSlot   BookingSlot[] @relation("bookingSlotToBooking")
  frequency     Frequency
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}
