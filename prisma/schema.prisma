// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// To visualize the db schema run 'npx prisma generate' => a schema.dbml file is generated, insert it into https://dbdiagram.io
generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Frequency {
  none
  weekly
  monthly
}

enum ModelKind {
  user
  property
  booking
  bookingDay
  propertyAvailability
  payment
  paymentMethod
  daySlot
}

enum PaymentType {
  reservation
  fee
  refund
}

enum PaymentStatus {
  pending
  paid
  rejected
}

enum Role {
  tenant
  landlord
  tenantLandlord
}

enum BookingStatus {
  accepted
  pending
  rejected
}

model User {
  kind             ModelKind  @default(user)
  handle           String     @unique
  fullName         String
  stripeId         String?    @unique
  email            String     @unique
  id               String     @id @default(cuid())
  image            String?
  dob              DateTime?
  zip              Int?
  description      String?
  isVerified       Boolean    @default(false)
  role             Role
  bookings         Booking[]  @relation("tenant")
  rentingOut       Property[] @relation("owner")
  superOwner       Boolean    @default(false)
  passportS3Id     String?
  passportVerified Boolean    @default(false)
  licenseS3Id      String?
  licenseVerified  Boolean    @default(false)
  solvencyS3Id     String?
  solvencyVerified Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model DaySlot {
  kind            ModelKind @default(daySlot)
  id              String    @id @default(cuid())
  startTime       DateTime
  endTime         DateTime
  bookedStartTime DateTime?
  bookedEndTime   DateTime?
  propertyId      String
  property        Property  @relation("daySlotToProperty", fields: [propertyId], references: [id], onDelete: Cascade)

  bookingId String?
  booking   Booking? @relation("daySlotToBooking", fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([startTime])
  @@index([endTime])
  @@index([propertyId])
  @@index([bookingId])
}

model Property {
  kind         ModelKind @default(property)
  id           String    @id @default(cuid())
  handle       String    @unique
  title        String
  size         Int // will be sq.ft
  ownerId      String
  owner        User      @relation(name: "owner", fields: [ownerId], references: [id], onDelete: Cascade)
  bookings     Booking[] @relation("property")
  street       String
  streetNumber Int
  zip          Int
  city         String
  description  String
  pickup       Boolean   @default(false)
  isVerified   Boolean   @default(false)
  hourlyPrice  Int // => decimal
  serviceFee   Int
  rules        String[]
  deposit      Int
  images       String[]
  partialSpace Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  daySlots     DaySlot[] @relation("daySlotToProperty")

  @@index([handle, hourlyPrice])
}

model Booking {
  kind          ModelKind     @default(booking)
  id            String        @id @default(cuid())
  tenantId      String
  tenant        User          @relation(name: "tenant", fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId    String
  property      Property      @relation(name: "property", fields: [propertyId], references: [id], onDelete: Cascade)
  bookingStatus BookingStatus
  totalPrice    Float         @default(0)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  daySlots      DaySlot[]     @relation("daySlotToBooking")
  frequency     Frequency
}
