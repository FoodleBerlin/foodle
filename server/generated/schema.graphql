### This file was generated by Nexus Schema
### Do not make changes to this file directly

input AvailableDay {
  endTime: DateTime!
  startTime: DateTime!
}

type Booking {
  bookingStatus: BookingStatus!
  daySlots: [DaySlot!]!
  endDate: String!
  frequency: FrequencyEnum!
  id: String!
  property: Property!
  startDate: String!
  tenant: User!
  totalPrice: Float!
}

"""
map nexus BookingStatus to prisma enum
"""
enum BookingStatus {
  ACCEPTED
  PENDING
  REJECTED
}

type ClientErrorInvalidGenericDaySlotInput {
  message: String!
}

type ClientErrorInvalidHandle {
  message: String!
}

type ClientErrorInvalidInput {
  message: String!
}

type ClientErrorInvalidPropertyInput {
  message: String!
}

type ClientErrorInvalidPropertySlotInput {
  message: String!
}

type ClientErrorPropertyNotExists {
  message: String!
}

type ClientErrorUserNotExists {
  message: String!
}

type CreateBookingReturn {
  Booking: Booking
  ClientErrorInvalidInput: ClientErrorInvalidInput
  ClientErrorInvalidPropertyInput: ClientErrorInvalidPropertyInput
  ClientErrorPropertyNotExists: ClientErrorPropertyNotExists
  ClientErrorUserNotExists: ClientErrorUserNotExists
  NoAvailableSlots: NoAvailableSlots
  UnknownError: UnknownError
}

type CreateListingReturn {
  ClientErrorInvalidInput: ClientErrorInvalidInput
  ClientErrorUserNotExists: ClientErrorUserNotExists
  NoAvailableSlots: NoAvailableSlots
  Property: Property
  UnknownError: UnknownError
}

type CustomerCharge {
  amount: Int
  card: String
  currency: String
  date: Int
  description: String
  invoiceId: String
  status: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DaySlot {
  bookedStartTime: DateTime
  booking: Booking
  endTime: DateTime!
  property: Property
  startTime: DateTime!
}

type findAllPropertiesReturn {
  Properties: [Property!]
  UnknownError: UnknownError
}

type findPropertyResult {
  ClientErrorInvalidInput: ClientErrorInvalidInput
  ClientErrorPropertyNotExists: ClientErrorPropertyNotExists
  Property: Property
}

type findUserResult {
  ClientErrorInvalidInput: ClientErrorInvalidInput
  ClientErrorUserNotExists: ClientErrorUserNotExists
  User: User
}

"""
map nexus frequency to prisma enum
"""
enum FrequencyEnum {
  MONTHLY
  NONE
  WEEKLY
}

type GetBookingsOfUser {
  Bookings: [Booking!]
  ClientErrorUserNotExists: ClientErrorUserNotExists
}

type Mutation {
  createBooking(
    daySlots: [AvailableDay!]!
    endDate: DateTime!
    frequency: FrequencyEnum!
    propertyHandle: String!
    startDate: DateTime!
  ): CreateBookingReturn!
  createListing(
    availableDays: [AvailableDay!]!
    city: String!
    deposit: Int!
    description: String!
    endDate: DateTime!
    frequency: FrequencyEnum!
    hourlyPrice: Int!
    images: [String!]!
    ownerHandle: String!
    partialSpace: Boolean!
    pickup: Boolean
    rules: [String!]!
    serviceFee: Int!
    size: Int!
    startDate: DateTime!
    street: String!
    streetNumber: Int!
    title: String!
    zip: Int!
  ): CreateListingReturn!

  """
  Edit user profile data
  """
  updateUser(
    description: String
    dob: String
    fullName: String
    id: String
    licenseS3Id: String
    passportS3Id: String
    solvencyS3Id: String
    zip: Int
  ): findUserResult!
}

type NoAvailableSlots {
  message: String!
}

type PaymentInformation {
  cardNumber: String
  expiryMonth: Int
  expiryYear: Int
  type: String
}

type Property {
  bookings: [Booking!]!
  city: String!
  daySlots: [DaySlot!]!
  deposit: Int!
  description: String!
  handle: String!
  hourlyPrice: Int!
  images: [String!]!
  isVerified: Boolean!
  kind: String!
  owner: User
  partialSpace: Boolean!
  pickup: Boolean
  rules: [String!]!
  serviceFee: Int!
  size: Int!
  street: String!
  streetNumber: Int!
  title: String!
  zip: Int!
}

type Query {
  findAllProperties: findAllPropertiesReturn!

  """
  Takes user handle and returns all bookings of user
  """
  findBookingsOfUser: GetBookingsOfUser!

  """
  Takes a propertyId and returns the property
  """
  findProperty(handle: String!): findPropertyResult!

  """
  Takes a handle and returns the user.
  """
  findUser(handle: String): findUserResult!
}

type UnknownError {
  message: String!
}

type User {
  charges: [CustomerCharge!]!
  defaultPayment: PaymentInformation
  email: String!
  fullName: String!
  handle: String!
  id: String!
  paymentMethods: [PaymentInformation!]!
  zip: Int!
}
