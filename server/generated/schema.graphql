### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Booking {
  id: String!
}

type ClientErrorInvalidHandle {
  message: String!
}

type ClientErrorInvalidPropertyInput {
  message: String!
}

type ClientErrorPropertyNotExists {
  message: String!
}

type ClientErrorUserNotExists {
  message: String!
}

type createPropertyReturn {
  ClientErrorInvalidHandle: ClientErrorInvalidHandle
  ClientErrorInvalidPropertyInput: ClientErrorInvalidPropertyInput
  ClientErrorUserNotExists: ClientErrorUserNotExists
  Property: Property
  PropertyCreateError: PropertyCreateError
}

type Facility {
  id: String!
}

type findAllProperties {
  ClientErrorInvalidHandle: ClientErrorInvalidHandle
  Properties: [Property!]
}

type findPropertyResult {
  ClientErrorInvalidHandle: ClientErrorInvalidHandle
  ClientErrorPropertyNotExists: ClientErrorPropertyNotExists
  Property: Property
}

type findUserResult {
  ClientErrorInvalidHandle: ClientErrorInvalidHandle
  ClientErrorUserNotExists: ClientErrorUserNotExists
  User: User
}

type Mutation {
  createListing(
    cancellationType: String!
    city: String!
    description: String!
    ownerId: String!
    pickup: Boolean!
    rules: String!
    size: Int!
    street: String!
    streetNumber: Int!
    thingsToKnow: String!
    zip: Int!
  ): createPropertyReturn!
}

type Property {
  availabilities: PropertySlot
  bookings: [Booking!]!
  cancellationType: String!
  city: String!
  dailyPrice: Int!
  description: String!
  facilities: [Facility!]!
  isVerified: Boolean!
  kind: String!
  owner: User
  pickup: Boolean!
  rules: [String!]!
  serviceFee: Int!
  size: Int!
  street: String!
  streetNumber: Int!
  thingsToKnow: String!
  zip: Int!
}

type PropertyCreateError {
  message: String!
}

type PropertySlot {
  id: String!
}

type Query {
  findAllProperties: findAllProperties!

  """
  Takes a propertyId and returns the property
  """
  findProperty(id: String): findPropertyResult!

  """
  Takes a handle and returns the user
  """
  findUser(handle: String): findUserResult!
}

type User {
  email: String!
  fullName: String!
  handle: String!
  id: String!
  zip: Int!
}
