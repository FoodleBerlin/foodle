"use strict";
/* eslint-disable */
/**
 * This module is pulled out of @prisma/client codebase.
 *
 * TODO Ask client team to expose this helper function from @prisma/client
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.externalToInternalDmmf = exports.getCountAggregateOutputName = void 0;
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const pluralize_1 = (0, tslib_1.__importDefault)(require("pluralize"));
function getCountAggregateOutputName(modelName) {
    return `${(0, lodash_1.capitalize)(modelName)}CountAggregateOutputType`;
}
exports.getCountAggregateOutputName = getCountAggregateOutputName;
/**
 * Turns type: string into type: string[] for all args in order to support union input types.
 *
 * @param document
 */
function externalToInternalDmmf(document) {
    return {
        ...document,
        mappings: getMappings(document.mappings, document.datamodel),
    };
}
exports.externalToInternalDmmf = externalToInternalDmmf;
function getMappings(mappings, datamodel) {
    const modelOperations = mappings.modelOperations
        .filter((mapping) => {
        const model = datamodel.models.find((m) => m.name === mapping.model);
        if (!model) {
            throw new Error(`Mapping without model ${mapping.model}`);
        }
        return model.fields.some((f) => f.kind !== 'object');
    })
        .map((mapping) => ({
        model: mapping.model,
        plural: (0, pluralize_1.default)((0, lodash_1.lowerCase)(mapping.model)),
        findUnique: mapping.findUnique || mapping.findSingle,
        findFirst: mapping.findFirst,
        findMany: mapping.findMany,
        create: mapping.createOne || mapping.createSingle || mapping.create,
        createMany: mapping.createMany,
        delete: mapping.deleteOne || mapping.deleteSingle || mapping.delete,
        update: mapping.updateOne || mapping.updateSingle || mapping.update,
        deleteMany: mapping.deleteMany,
        updateMany: mapping.updateMany,
        upsert: mapping.upsertOne || mapping.upsertSingle || mapping.upsert,
        aggregate: mapping.aggregate,
        groupBy: mapping.groupBy,
    }));
    return {
        modelOperations,
        otherOperations: mappings.otherOperations,
    };
}
//# sourceMappingURL=prismaExternalToInternalDMMF.js.map