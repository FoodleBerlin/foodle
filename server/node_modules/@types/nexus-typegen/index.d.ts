/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as PrismaClient from '.prisma/client';
import type { Context } from './../../../context';
import type { core } from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void; // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void; // "DateTime";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AvailableDay: {
    // input type
    endTime: NexusGenScalars['DateTime']; // DateTime!
    startTime: NexusGenScalars['DateTime']; // DateTime!
  };
}

export interface NexusGenEnums {
  BookingStatus: PrismaClient.BookingStatus;
  FrequencyEnum: 'monthly' | 'none' | 'weekly';
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenObjects {
  Booking: PrismaClient.Booking;
  ClientErrorInvalidGenericDaySlotInput: {
    // root type
    message: string; // String!
  };
  ClientErrorInvalidHandle: {
    // root type
    message: string; // String!
  };
  ClientErrorInvalidInput: {
    // root type
    message: string; // String!
  };
  ClientErrorInvalidPropertyInput: {
    // root type
    message: string; // String!
  };
  ClientErrorInvalidPropertySlotInput: {
    // root type
    message: string; // String!
  };
  ClientErrorPropertyNotExists: {
    // root type
    message: string; // String!
  };
  ClientErrorUserNotExists: {
    // root type
    message: string; // String!
  };
  CreateBookingReturn: {
    // root type
    Booking?: NexusGenRootTypes['Booking'] | null; // Booking
    ClientErrorInvalidInput?: NexusGenRootTypes['ClientErrorInvalidInput'] | null; // ClientErrorInvalidInput
    ClientErrorInvalidPropertyInput?: NexusGenRootTypes['ClientErrorInvalidPropertyInput'] | null; // ClientErrorInvalidPropertyInput
    ClientErrorPropertyNotExists?: NexusGenRootTypes['ClientErrorPropertyNotExists'] | null; // ClientErrorPropertyNotExists
    ClientErrorUserNotExists?: NexusGenRootTypes['ClientErrorUserNotExists'] | null; // ClientErrorUserNotExists
    NoAvailableSlots?: NexusGenRootTypes['NoAvailableSlots'] | null; // NoAvailableSlots
    UnknownError?: NexusGenRootTypes['UnknownError'] | null; // UnknownError
  };
  CreateListingReturn: {
    // root type
    ClientErrorInvalidInput?: NexusGenRootTypes['ClientErrorInvalidInput'] | null; // ClientErrorInvalidInput
    ClientErrorUserNotExists?: NexusGenRootTypes['ClientErrorUserNotExists'] | null; // ClientErrorUserNotExists
    NoAvailableSlots?: NexusGenRootTypes['NoAvailableSlots'] | null; // NoAvailableSlots
    Property?: NexusGenRootTypes['Property'] | null; // Property
    UnknownError?: NexusGenRootTypes['UnknownError'] | null; // UnknownError
  };
  CustomerCharge: {
    // root type
    amount?: number | null; // Int
    card?: string | null; // String
    currency?: string | null; // String
    date?: number | null; // Int
    description?: string | null; // String
    invoiceId?: string | null; // String
    status?: string | null; // String
  };
  DaySlot: PrismaClient.DaySlot;
  GetBookingsOfUser: {
    // root type
    Bookings?: NexusGenRootTypes['Booking'][] | null; // [Booking!]
    ClientErrorUserNotExists?: NexusGenRootTypes['ClientErrorUserNotExists'] | null; // ClientErrorUserNotExists
  };
  Mutation: {};
  NoAvailableSlots: {
    // root type
    message: string; // String!
  };
  PaymentInformation: {
    // root type
    cardNumber?: string | null; // String
    expiryMonth?: number | null; // Int
    expiryYear?: number | null; // Int
    type?: string | null; // String
  };
  Property: PrismaClient.Property;
  Query: {};
  UnknownError: {
    // root type
    message: string; // String!
  };
  User: PrismaClient.User;
  findAllPropertiesReturn: {
    // root type
    Properties?: NexusGenRootTypes['Property'][] | null; // [Property!]
    UnknownError?: NexusGenRootTypes['UnknownError'] | null; // UnknownError
  };
  findPropertyResult: {
    // root type
    ClientErrorInvalidInput?: NexusGenRootTypes['ClientErrorInvalidInput'] | null; // ClientErrorInvalidInput
    ClientErrorPropertyNotExists?: NexusGenRootTypes['ClientErrorPropertyNotExists'] | null; // ClientErrorPropertyNotExists
    Property?: NexusGenRootTypes['Property'] | null; // Property
  };
  findUserResult: {
    // root type
    ClientErrorInvalidHandle?: NexusGenRootTypes['ClientErrorInvalidHandle'] | null; // ClientErrorInvalidHandle
    ClientErrorInvalidInput?: NexusGenRootTypes['ClientErrorInvalidInput'] | null; // ClientErrorInvalidInput
    ClientErrorUserNotExists?: NexusGenRootTypes['ClientErrorUserNotExists'] | null; // ClientErrorUserNotExists
    UnknownError?: NexusGenRootTypes['UnknownError'] | null; // UnknownError
    User?: NexusGenRootTypes['User'] | null; // User
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums;

export interface NexusGenFieldTypes {
  Booking: {
    // field return type
    bookingStatus: NexusGenEnums['BookingStatus']; // BookingStatus!
    daySlots: NexusGenRootTypes['DaySlot'][]; // [DaySlot!]!
    endDate: string; // String!
    frequency: NexusGenEnums['FrequencyEnum']; // FrequencyEnum!
    id: string; // String!
    property: NexusGenRootTypes['Property']; // Property!
    startDate: string; // String!
    tenant: NexusGenRootTypes['User']; // User!
    totalPrice: number; // Float!
  };
  ClientErrorInvalidGenericDaySlotInput: {
    // field return type
    message: string; // String!
  };
  ClientErrorInvalidHandle: {
    // field return type
    message: string; // String!
  };
  ClientErrorInvalidInput: {
    // field return type
    message: string; // String!
  };
  ClientErrorInvalidPropertyInput: {
    // field return type
    message: string; // String!
  };
  ClientErrorInvalidPropertySlotInput: {
    // field return type
    message: string; // String!
  };
  ClientErrorPropertyNotExists: {
    // field return type
    message: string; // String!
  };
  ClientErrorUserNotExists: {
    // field return type
    message: string; // String!
  };
  CreateBookingReturn: {
    // field return type
    Booking: NexusGenRootTypes['Booking'] | null; // Booking
    ClientErrorInvalidInput: NexusGenRootTypes['ClientErrorInvalidInput'] | null; // ClientErrorInvalidInput
    ClientErrorInvalidPropertyInput: NexusGenRootTypes['ClientErrorInvalidPropertyInput'] | null; // ClientErrorInvalidPropertyInput
    ClientErrorPropertyNotExists: NexusGenRootTypes['ClientErrorPropertyNotExists'] | null; // ClientErrorPropertyNotExists
    ClientErrorUserNotExists: NexusGenRootTypes['ClientErrorUserNotExists'] | null; // ClientErrorUserNotExists
    NoAvailableSlots: NexusGenRootTypes['NoAvailableSlots'] | null; // NoAvailableSlots
    UnknownError: NexusGenRootTypes['UnknownError'] | null; // UnknownError
  };
  CreateListingReturn: {
    // field return type
    ClientErrorInvalidInput: NexusGenRootTypes['ClientErrorInvalidInput'] | null; // ClientErrorInvalidInput
    ClientErrorUserNotExists: NexusGenRootTypes['ClientErrorUserNotExists'] | null; // ClientErrorUserNotExists
    NoAvailableSlots: NexusGenRootTypes['NoAvailableSlots'] | null; // NoAvailableSlots
    Property: NexusGenRootTypes['Property'] | null; // Property
    UnknownError: NexusGenRootTypes['UnknownError'] | null; // UnknownError
  };
  CustomerCharge: {
    // field return type
    amount: number | null; // Int
    card: string | null; // String
    currency: string | null; // String
    date: number | null; // Int
    description: string | null; // String
    invoiceId: string | null; // String
    status: string | null; // String
  };
  DaySlot: {
    // field return type
    bookedStartTime: NexusGenScalars['DateTime'] | null; // DateTime
    booking: NexusGenRootTypes['Booking'] | null; // Booking
    endTime: NexusGenScalars['DateTime']; // DateTime!
    property: NexusGenRootTypes['Property'] | null; // Property
    startTime: NexusGenScalars['DateTime']; // DateTime!
  };
  GetBookingsOfUser: {
    // field return type
    Bookings: NexusGenRootTypes['Booking'][] | null; // [Booking!]
    ClientErrorUserNotExists: NexusGenRootTypes['ClientErrorUserNotExists'] | null; // ClientErrorUserNotExists
  };
  Mutation: {
    // field return type
    createBooking: NexusGenRootTypes['CreateBookingReturn']; // CreateBookingReturn!
    createListing: NexusGenRootTypes['CreateListingReturn']; // CreateListingReturn!
    updateUser: NexusGenRootTypes['findUserResult']; // findUserResult!
  };
  NoAvailableSlots: {
    // field return type
    message: string; // String!
  };
  PaymentInformation: {
    // field return type
    cardNumber: string | null; // String
    expiryMonth: number | null; // Int
    expiryYear: number | null; // Int
    type: string | null; // String
  };
  Property: {
    // field return type
    bookings: NexusGenRootTypes['Booking'][]; // [Booking!]!
    city: string; // String!
    daySlots: NexusGenRootTypes['DaySlot'][]; // [DaySlot!]!
    deposit: number; // Int!
    description: string; // String!
    handle: string; // String!
    hourlyPrice: number; // Int!
    images: string[]; // [String!]!
    isVerified: boolean; // Boolean!
    kind: string; // String!
    owner: NexusGenRootTypes['User'] | null; // User
    partialSpace: boolean; // Boolean!
    pickup: boolean | null; // Boolean
    rules: string[]; // [String!]!
    serviceFee: number; // Int!
    size: number; // Int!
    street: string; // String!
    streetNumber: string; // String!
    title: string; // String!
    zip: number; // Int!
  };
  Query: {
    // field return type
    findAllProperties: NexusGenRootTypes['findAllPropertiesReturn']; // findAllPropertiesReturn!
    findBookingsOfUser: NexusGenRootTypes['GetBookingsOfUser']; // GetBookingsOfUser!
    findProperty: NexusGenRootTypes['findPropertyResult']; // findPropertyResult!
    findUser: NexusGenRootTypes['findUserResult']; // findUserResult!
  };
  UnknownError: {
    // field return type
    message: string; // String!
  };
  User: {
    // field return type
    charges: NexusGenRootTypes['CustomerCharge'][]; // [CustomerCharge!]!
    defaultPayment: NexusGenRootTypes['PaymentInformation'] | null; // PaymentInformation
    description: string | null; // String
    dob: NexusGenScalars['DateTime'] | null; // DateTime
    email: string; // String!
    fullName: string; // String!
    handle: string; // String!
    id: string; // String!
    licenseS3Id: string | null; // String
    passportS3Id: string | null; // String
    paymentMethods: NexusGenRootTypes['PaymentInformation'][]; // [PaymentInformation!]!
    solvencyS3Id: string | null; // String
    zip: number | null; // Int
  };
  findAllPropertiesReturn: {
    // field return type
    Properties: NexusGenRootTypes['Property'][] | null; // [Property!]
    UnknownError: NexusGenRootTypes['UnknownError'] | null; // UnknownError
  };
  findPropertyResult: {
    // field return type
    ClientErrorInvalidInput: NexusGenRootTypes['ClientErrorInvalidInput'] | null; // ClientErrorInvalidInput
    ClientErrorPropertyNotExists: NexusGenRootTypes['ClientErrorPropertyNotExists'] | null; // ClientErrorPropertyNotExists
    Property: NexusGenRootTypes['Property'] | null; // Property
  };
  findUserResult: {
    // field return type
    ClientErrorInvalidHandle: NexusGenRootTypes['ClientErrorInvalidHandle'] | null; // ClientErrorInvalidHandle
    ClientErrorInvalidInput: NexusGenRootTypes['ClientErrorInvalidInput'] | null; // ClientErrorInvalidInput
    ClientErrorUserNotExists: NexusGenRootTypes['ClientErrorUserNotExists'] | null; // ClientErrorUserNotExists
    UnknownError: NexusGenRootTypes['UnknownError'] | null; // UnknownError
    User: NexusGenRootTypes['User'] | null; // User
  };
}

export interface NexusGenFieldTypeNames {
  Booking: {
    // field return type name
    bookingStatus: 'BookingStatus';
    daySlots: 'DaySlot';
    endDate: 'String';
    frequency: 'FrequencyEnum';
    id: 'String';
    property: 'Property';
    startDate: 'String';
    tenant: 'User';
    totalPrice: 'Float';
  };
  ClientErrorInvalidGenericDaySlotInput: {
    // field return type name
    message: 'String';
  };
  ClientErrorInvalidHandle: {
    // field return type name
    message: 'String';
  };
  ClientErrorInvalidInput: {
    // field return type name
    message: 'String';
  };
  ClientErrorInvalidPropertyInput: {
    // field return type name
    message: 'String';
  };
  ClientErrorInvalidPropertySlotInput: {
    // field return type name
    message: 'String';
  };
  ClientErrorPropertyNotExists: {
    // field return type name
    message: 'String';
  };
  ClientErrorUserNotExists: {
    // field return type name
    message: 'String';
  };
  CreateBookingReturn: {
    // field return type name
    Booking: 'Booking';
    ClientErrorInvalidInput: 'ClientErrorInvalidInput';
    ClientErrorInvalidPropertyInput: 'ClientErrorInvalidPropertyInput';
    ClientErrorPropertyNotExists: 'ClientErrorPropertyNotExists';
    ClientErrorUserNotExists: 'ClientErrorUserNotExists';
    NoAvailableSlots: 'NoAvailableSlots';
    UnknownError: 'UnknownError';
  };
  CreateListingReturn: {
    // field return type name
    ClientErrorInvalidInput: 'ClientErrorInvalidInput';
    ClientErrorUserNotExists: 'ClientErrorUserNotExists';
    NoAvailableSlots: 'NoAvailableSlots';
    Property: 'Property';
    UnknownError: 'UnknownError';
  };
  CustomerCharge: {
    // field return type name
    amount: 'Int';
    card: 'String';
    currency: 'String';
    date: 'Int';
    description: 'String';
    invoiceId: 'String';
    status: 'String';
  };
  DaySlot: {
    // field return type name
    bookedStartTime: 'DateTime';
    booking: 'Booking';
    endTime: 'DateTime';
    property: 'Property';
    startTime: 'DateTime';
  };
  GetBookingsOfUser: {
    // field return type name
    Bookings: 'Booking';
    ClientErrorUserNotExists: 'ClientErrorUserNotExists';
  };
  Mutation: {
    // field return type name
    createBooking: 'CreateBookingReturn';
    createListing: 'CreateListingReturn';
    updateUser: 'findUserResult';
  };
  NoAvailableSlots: {
    // field return type name
    message: 'String';
  };
  PaymentInformation: {
    // field return type name
    cardNumber: 'String';
    expiryMonth: 'Int';
    expiryYear: 'Int';
    type: 'String';
  };
  Property: {
    // field return type name
    bookings: 'Booking';
    city: 'String';
    daySlots: 'DaySlot';
    deposit: 'Int';
    description: 'String';
    handle: 'String';
    hourlyPrice: 'Int';
    images: 'String';
    isVerified: 'Boolean';
    kind: 'String';
    owner: 'User';
    partialSpace: 'Boolean';
    pickup: 'Boolean';
    rules: 'String';
    serviceFee: 'Int';
    size: 'Int';
    street: 'String';
    streetNumber: 'String';
    title: 'String';
    zip: 'Int';
  };
  Query: {
    // field return type name
    findAllProperties: 'findAllPropertiesReturn';
    findBookingsOfUser: 'GetBookingsOfUser';
    findProperty: 'findPropertyResult';
    findUser: 'findUserResult';
  };
  UnknownError: {
    // field return type name
    message: 'String';
  };
  User: {
    // field return type name
    charges: 'CustomerCharge';
    defaultPayment: 'PaymentInformation';
    description: 'String';
    dob: 'DateTime';
    email: 'String';
    fullName: 'String';
    handle: 'String';
    id: 'String';
    licenseS3Id: 'String';
    passportS3Id: 'String';
    paymentMethods: 'PaymentInformation';
    solvencyS3Id: 'String';
    zip: 'Int';
  };
  findAllPropertiesReturn: {
    // field return type name
    Properties: 'Property';
    UnknownError: 'UnknownError';
  };
  findPropertyResult: {
    // field return type name
    ClientErrorInvalidInput: 'ClientErrorInvalidInput';
    ClientErrorPropertyNotExists: 'ClientErrorPropertyNotExists';
    Property: 'Property';
  };
  findUserResult: {
    // field return type name
    ClientErrorInvalidHandle: 'ClientErrorInvalidHandle';
    ClientErrorInvalidInput: 'ClientErrorInvalidInput';
    ClientErrorUserNotExists: 'ClientErrorUserNotExists';
    UnknownError: 'UnknownError';
    User: 'User';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    createBooking: {
      // args
      daySlots: NexusGenInputs['AvailableDay'][]; // [AvailableDay!]!
      endDate: NexusGenScalars['DateTime']; // DateTime!
      frequency: NexusGenEnums['FrequencyEnum']; // FrequencyEnum!
      propertyHandle: string; // String!
      startDate: NexusGenScalars['DateTime']; // DateTime!
    };
    createListing: {
      // args
      availableDays: NexusGenInputs['AvailableDay'][]; // [AvailableDay!]!
      city: string; // String!
      deposit: number; // Int!
      description: string; // String!
      endDate: NexusGenScalars['DateTime']; // DateTime!
      frequency: NexusGenEnums['FrequencyEnum']; // FrequencyEnum!
      hourlyPrice: number; // Int!
      images: string[]; // [String!]!
      ownerHandle: string; // String!
      partialSpace: boolean; // Boolean!
      pickup?: boolean | null; // Boolean
      rules: string[]; // [String!]!
      serviceFee: number; // Int!
      size: number; // Int!
      startDate: NexusGenScalars['DateTime']; // DateTime!
      street: string; // String!
      streetNumber: string; // String!
      title: string; // String!
      zip: number; // Int!
    };
    updateUser: {
      // args
      description?: string | null; // String
      dob?: string | null; // String
      fullName?: string | null; // String
      id?: string | null; // String
      licenseS3Id?: string | null; // String
      passportS3Id?: string | null; // String
      solvencyS3Id?: string | null; // String
      zip?: number | null; // Int
    };
  };
  Query: {
    findProperty: {
      // args
      handle: string; // String!
    };
    findUser: {
      // args
      handle?: string | null; // String
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true;
    __typename: false;
    resolveType: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
