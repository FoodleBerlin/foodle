"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const data_cjs_1 = require("./data.cjs");
const Filter = __importStar(require("./filter.cjs"));
const level_cjs_1 = require("./level.cjs");
const Lo = __importStar(require("lodash"));
const OS = __importStar(require("node:os"));
/**
 * Create a logger.
 */
const create = (rootState, path, parentContext) => {
    if (path)
        validatePath(path);
    const state = {
        // Copy as addToContext will mutate it
        pinnedAndParentContext: parentContext ? Lo.cloneDeep(parentContext) : undefined,
        children: []
    };
    const updateContextAndPropagate = (newContext) => {
        state.pinnedAndParentContext = newContext;
        state.children.forEach((child) => {
            // eslint-disable-next-line
            child.onNewParentContext(state.pinnedAndParentContext);
        });
    };
    const send = (levelLabel, event, localContext) => {
        const level = level_cjs_1.LEVELS[levelLabel].number;
        const logRec = {
            event,
            level
        };
        if (path)
            logRec.path = path;
        if (Filter.test(rootState.settings.filter.patterns, logRec)) {
            // Avoid mutating the passed local context
            if (localContext && state.pinnedAndParentContext) {
                logRec.context = Lo.merge({}, state.pinnedAndParentContext, localContext);
            }
            else if (localContext) {
                logRec.context = localContext;
            }
            else if (state.pinnedAndParentContext) {
                logRec.context = state.pinnedAndParentContext;
            }
            if (rootState.settings?.data.hostname) {
                logRec.hostname = OS.hostname();
            }
            if (rootState.settings?.data.pid) {
                logRec.pid = process.pid;
            }
            if (rootState.settings?.data.time) {
                logRec.time = Date.now();
            }
            rootState.settings.output.write(logRec, rootState.settings);
        }
    };
    const link = {
        onNewParentContext: (newParentContext) => {
            updateContextAndPropagate(Lo.merge(
            // Copy so that we don't mutate parent while maintaining local overrides...
            {}, newParentContext, 
            // ...this
            state.pinnedAndParentContext));
        }
    };
    const logger = {
        fatal: (event, context) => {
            send(`fatal`, event, context);
        },
        error: (event, context) => {
            send(`error`, event, context);
        },
        warn: (event, context) => {
            send(`warn`, event, context);
        },
        info: (event, context) => {
            send(`info`, event, context);
        },
        debug: (event, context) => {
            send(`debug`, event, context);
        },
        trace: (event, context) => {
            send(`trace`, event, context);
        },
        addToContext: (context) => {
            // Can safely mutate here, save some electricity...
            updateContextAndPropagate(Lo.merge(state.pinnedAndParentContext, context));
            return logger;
        },
        child: (name) => {
            const { logger: child, link } = (0, exports.create)(rootState, path ? path.concat([name]) : [name], state.pinnedAndParentContext);
            state.children.push(link);
            return child;
        }
    };
    return {
        logger,
        link
    };
};
exports.create = create;
const validatePath = (path) => {
    path.forEach((part) => {
        if (!data_cjs_1.validPathSegmentNameRegex.test(part)) {
            throw new Error(`Invalid logger path segment: ${part}`);
        }
    });
};
//# sourceMappingURL=logger.cjs.map