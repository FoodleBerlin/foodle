
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  kind: ModelKind
  handle: string
  fullName: string
  stripeId: string | null
  email: string
  id: string
  image: string | null
  dob: Date | null
  zip: number | null
  description: string | null
  isVerified: boolean
  role: Role
  superOwner: boolean
  passportS3Id: string | null
  passportVerified: boolean
  licenseS3Id: string | null
  licenseVerified: boolean
  solvencyS3Id: string | null
  solvencyVerified: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model DaySlot
 * 
 */
export type DaySlot = {
  kind: ModelKind
  id: string
  startTime: Date
  endTime: Date
  bookedStartTime: Date | null
  bookedEndTime: Date | null
  propertyId: string
  bookingId: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Property
 * 
 */
export type Property = {
  kind: ModelKind
  id: string
  handle: string
  title: string
  size: number
  ownerId: string
  street: string
  streetNumber: string
  zip: number
  city: string
  description: string
  pickup: boolean
  isVerified: boolean
  hourlyPrice: number
  serviceFee: number
  rules: string[]
  deposit: number
  images: string[]
  partialSpace: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Booking
 * 
 */
export type Booking = {
  kind: ModelKind
  id: string
  tenantId: string
  propertyId: string
  bookingStatus: BookingStatus
  totalPrice: number
  startDate: Date
  endDate: Date
  createdAt: Date
  updatedAt: Date
  frequency: Frequency
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ModelKind: {
  user: 'user',
  property: 'property',
  booking: 'booking',
  bookingDay: 'bookingDay',
  propertyAvailability: 'propertyAvailability',
  payment: 'payment',
  paymentMethod: 'paymentMethod',
  daySlot: 'daySlot'
};

export type ModelKind = (typeof ModelKind)[keyof typeof ModelKind]


export const Role: {
  tenant: 'tenant',
  landlord: 'landlord',
  tenantLandlord: 'tenantLandlord'
};

export type Role = (typeof Role)[keyof typeof Role]


export const BookingStatus: {
  accepted: 'accepted',
  pending: 'pending',
  rejected: 'rejected'
};

export type BookingStatus = (typeof BookingStatus)[keyof typeof BookingStatus]


export const Frequency: {
  none: 'none',
  weekly: 'weekly',
  monthly: 'monthly'
};

export type Frequency = (typeof Frequency)[keyof typeof Frequency]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.daySlot`: Exposes CRUD operations for the **DaySlot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DaySlots
    * const daySlots = await prisma.daySlot.findMany()
    * ```
    */
  get daySlot(): Prisma.DaySlotDelegate<GlobalReject>;

  /**
   * `prisma.property`: Exposes CRUD operations for the **Property** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Properties
    * const properties = await prisma.property.findMany()
    * ```
    */
  get property(): Prisma.PropertyDelegate<GlobalReject>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    DaySlot: 'DaySlot',
    Property: 'Property',
    Booking: 'Booking'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    bookings: number
    rentingOut: number
  }

  export type UserCountOutputTypeSelect = {
    bookings?: boolean
    rentingOut?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type PropertyCountOutputType
   */


  export type PropertyCountOutputType = {
    bookings: number
    daySlots: number
  }

  export type PropertyCountOutputTypeSelect = {
    bookings?: boolean
    daySlots?: boolean
  }

  export type PropertyCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PropertyCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PropertyCountOutputType
    : S extends undefined
    ? never
    : S extends PropertyCountOutputTypeArgs
    ?'include' extends U
    ? PropertyCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PropertyCountOutputType ? PropertyCountOutputType[P] : never
  } 
    : PropertyCountOutputType
  : PropertyCountOutputType




  // Custom InputTypes

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PropertyCountOutputType
     * 
    **/
    select?: PropertyCountOutputTypeSelect | null
  }



  /**
   * Count Type BookingCountOutputType
   */


  export type BookingCountOutputType = {
    daySlots: number
  }

  export type BookingCountOutputTypeSelect = {
    daySlots?: boolean
  }

  export type BookingCountOutputTypeGetPayload<
    S extends boolean | null | undefined | BookingCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? BookingCountOutputType
    : S extends undefined
    ? never
    : S extends BookingCountOutputTypeArgs
    ?'include' extends U
    ? BookingCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof BookingCountOutputType ? BookingCountOutputType[P] : never
  } 
    : BookingCountOutputType
  : BookingCountOutputType




  // Custom InputTypes

  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BookingCountOutputType
     * 
    **/
    select?: BookingCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    zip: number | null
  }

  export type UserSumAggregateOutputType = {
    zip: number | null
  }

  export type UserMinAggregateOutputType = {
    kind: ModelKind | null
    handle: string | null
    fullName: string | null
    stripeId: string | null
    email: string | null
    id: string | null
    image: string | null
    dob: Date | null
    zip: number | null
    description: string | null
    isVerified: boolean | null
    role: Role | null
    superOwner: boolean | null
    passportS3Id: string | null
    passportVerified: boolean | null
    licenseS3Id: string | null
    licenseVerified: boolean | null
    solvencyS3Id: string | null
    solvencyVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    kind: ModelKind | null
    handle: string | null
    fullName: string | null
    stripeId: string | null
    email: string | null
    id: string | null
    image: string | null
    dob: Date | null
    zip: number | null
    description: string | null
    isVerified: boolean | null
    role: Role | null
    superOwner: boolean | null
    passportS3Id: string | null
    passportVerified: boolean | null
    licenseS3Id: string | null
    licenseVerified: boolean | null
    solvencyS3Id: string | null
    solvencyVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    kind: number
    handle: number
    fullName: number
    stripeId: number
    email: number
    id: number
    image: number
    dob: number
    zip: number
    description: number
    isVerified: number
    role: number
    superOwner: number
    passportS3Id: number
    passportVerified: number
    licenseS3Id: number
    licenseVerified: number
    solvencyS3Id: number
    solvencyVerified: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    zip?: true
  }

  export type UserSumAggregateInputType = {
    zip?: true
  }

  export type UserMinAggregateInputType = {
    kind?: true
    handle?: true
    fullName?: true
    stripeId?: true
    email?: true
    id?: true
    image?: true
    dob?: true
    zip?: true
    description?: true
    isVerified?: true
    role?: true
    superOwner?: true
    passportS3Id?: true
    passportVerified?: true
    licenseS3Id?: true
    licenseVerified?: true
    solvencyS3Id?: true
    solvencyVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    kind?: true
    handle?: true
    fullName?: true
    stripeId?: true
    email?: true
    id?: true
    image?: true
    dob?: true
    zip?: true
    description?: true
    isVerified?: true
    role?: true
    superOwner?: true
    passportS3Id?: true
    passportVerified?: true
    licenseS3Id?: true
    licenseVerified?: true
    solvencyS3Id?: true
    solvencyVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    kind?: true
    handle?: true
    fullName?: true
    stripeId?: true
    email?: true
    id?: true
    image?: true
    dob?: true
    zip?: true
    description?: true
    isVerified?: true
    role?: true
    superOwner?: true
    passportS3Id?: true
    passportVerified?: true
    licenseS3Id?: true
    licenseVerified?: true
    solvencyS3Id?: true
    solvencyVerified?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    kind: ModelKind
    handle: string
    fullName: string
    stripeId: string | null
    email: string
    id: string
    image: string | null
    dob: Date | null
    zip: number | null
    description: string | null
    isVerified: boolean
    role: Role
    superOwner: boolean
    passportS3Id: string | null
    passportVerified: boolean
    licenseS3Id: string | null
    licenseVerified: boolean
    solvencyS3Id: string | null
    solvencyVerified: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    kind?: boolean
    handle?: boolean
    fullName?: boolean
    stripeId?: boolean
    email?: boolean
    id?: boolean
    image?: boolean
    dob?: boolean
    zip?: boolean
    description?: boolean
    isVerified?: boolean
    role?: boolean
    bookings?: boolean | BookingFindManyArgs
    rentingOut?: boolean | PropertyFindManyArgs
    superOwner?: boolean
    passportS3Id?: boolean
    passportVerified?: boolean
    licenseS3Id?: boolean
    licenseVerified?: boolean
    solvencyS3Id?: boolean
    solvencyVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    bookings?: boolean | BookingFindManyArgs
    rentingOut?: boolean | PropertyFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'bookings' ? Array < BookingGetPayload<S['include'][P]>>  :
        P extends 'rentingOut' ? Array < PropertyGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'bookings' ? Array < BookingGetPayload<S['select'][P]>>  :
        P extends 'rentingOut' ? Array < PropertyGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `handle`
     * const userWithHandleOnly = await prisma.user.findMany({ select: { handle: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    bookings<T extends BookingFindManyArgs = {}>(args?: Subset<T, BookingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>;

    rentingOut<T extends PropertyFindManyArgs = {}>(args?: Subset<T, PropertyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Property>>, PrismaPromise<Array<PropertyGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model DaySlot
   */


  export type AggregateDaySlot = {
    _count: DaySlotCountAggregateOutputType | null
    _min: DaySlotMinAggregateOutputType | null
    _max: DaySlotMaxAggregateOutputType | null
  }

  export type DaySlotMinAggregateOutputType = {
    kind: ModelKind | null
    id: string | null
    startTime: Date | null
    endTime: Date | null
    bookedStartTime: Date | null
    bookedEndTime: Date | null
    propertyId: string | null
    bookingId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DaySlotMaxAggregateOutputType = {
    kind: ModelKind | null
    id: string | null
    startTime: Date | null
    endTime: Date | null
    bookedStartTime: Date | null
    bookedEndTime: Date | null
    propertyId: string | null
    bookingId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DaySlotCountAggregateOutputType = {
    kind: number
    id: number
    startTime: number
    endTime: number
    bookedStartTime: number
    bookedEndTime: number
    propertyId: number
    bookingId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DaySlotMinAggregateInputType = {
    kind?: true
    id?: true
    startTime?: true
    endTime?: true
    bookedStartTime?: true
    bookedEndTime?: true
    propertyId?: true
    bookingId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DaySlotMaxAggregateInputType = {
    kind?: true
    id?: true
    startTime?: true
    endTime?: true
    bookedStartTime?: true
    bookedEndTime?: true
    propertyId?: true
    bookingId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DaySlotCountAggregateInputType = {
    kind?: true
    id?: true
    startTime?: true
    endTime?: true
    bookedStartTime?: true
    bookedEndTime?: true
    propertyId?: true
    bookingId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DaySlotAggregateArgs = {
    /**
     * Filter which DaySlot to aggregate.
     * 
    **/
    where?: DaySlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaySlots to fetch.
     * 
    **/
    orderBy?: Enumerable<DaySlotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DaySlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaySlots from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaySlots.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DaySlots
    **/
    _count?: true | DaySlotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DaySlotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DaySlotMaxAggregateInputType
  }

  export type GetDaySlotAggregateType<T extends DaySlotAggregateArgs> = {
        [P in keyof T & keyof AggregateDaySlot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDaySlot[P]>
      : GetScalarType<T[P], AggregateDaySlot[P]>
  }




  export type DaySlotGroupByArgs = {
    where?: DaySlotWhereInput
    orderBy?: Enumerable<DaySlotOrderByWithAggregationInput>
    by: Array<DaySlotScalarFieldEnum>
    having?: DaySlotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DaySlotCountAggregateInputType | true
    _min?: DaySlotMinAggregateInputType
    _max?: DaySlotMaxAggregateInputType
  }


  export type DaySlotGroupByOutputType = {
    kind: ModelKind
    id: string
    startTime: Date
    endTime: Date
    bookedStartTime: Date | null
    bookedEndTime: Date | null
    propertyId: string
    bookingId: string | null
    createdAt: Date
    updatedAt: Date
    _count: DaySlotCountAggregateOutputType | null
    _min: DaySlotMinAggregateOutputType | null
    _max: DaySlotMaxAggregateOutputType | null
  }

  type GetDaySlotGroupByPayload<T extends DaySlotGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DaySlotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DaySlotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DaySlotGroupByOutputType[P]>
            : GetScalarType<T[P], DaySlotGroupByOutputType[P]>
        }
      >
    >


  export type DaySlotSelect = {
    kind?: boolean
    id?: boolean
    startTime?: boolean
    endTime?: boolean
    bookedStartTime?: boolean
    bookedEndTime?: boolean
    propertyId?: boolean
    property?: boolean | PropertyArgs
    bookingId?: boolean
    booking?: boolean | BookingArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DaySlotInclude = {
    property?: boolean | PropertyArgs
    booking?: boolean | BookingArgs
  }

  export type DaySlotGetPayload<
    S extends boolean | null | undefined | DaySlotArgs,
    U = keyof S
      > = S extends true
        ? DaySlot
    : S extends undefined
    ? never
    : S extends DaySlotArgs | DaySlotFindManyArgs
    ?'include' extends U
    ? DaySlot  & {
    [P in TrueKeys<S['include']>]:
        P extends 'property' ? PropertyGetPayload<S['include'][P]> :
        P extends 'booking' ? BookingGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'property' ? PropertyGetPayload<S['select'][P]> :
        P extends 'booking' ? BookingGetPayload<S['select'][P]> | null :  P extends keyof DaySlot ? DaySlot[P] : never
  } 
    : DaySlot
  : DaySlot


  type DaySlotCountArgs = Merge<
    Omit<DaySlotFindManyArgs, 'select' | 'include'> & {
      select?: DaySlotCountAggregateInputType | true
    }
  >

  export interface DaySlotDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DaySlot that matches the filter.
     * @param {DaySlotFindUniqueArgs} args - Arguments to find a DaySlot
     * @example
     * // Get one DaySlot
     * const daySlot = await prisma.daySlot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DaySlotFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DaySlotFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DaySlot'> extends True ? CheckSelect<T, Prisma__DaySlotClient<DaySlot>, Prisma__DaySlotClient<DaySlotGetPayload<T>>> : CheckSelect<T, Prisma__DaySlotClient<DaySlot | null >, Prisma__DaySlotClient<DaySlotGetPayload<T> | null >>

    /**
     * Find the first DaySlot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySlotFindFirstArgs} args - Arguments to find a DaySlot
     * @example
     * // Get one DaySlot
     * const daySlot = await prisma.daySlot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DaySlotFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DaySlotFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DaySlot'> extends True ? CheckSelect<T, Prisma__DaySlotClient<DaySlot>, Prisma__DaySlotClient<DaySlotGetPayload<T>>> : CheckSelect<T, Prisma__DaySlotClient<DaySlot | null >, Prisma__DaySlotClient<DaySlotGetPayload<T> | null >>

    /**
     * Find zero or more DaySlots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySlotFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DaySlots
     * const daySlots = await prisma.daySlot.findMany()
     * 
     * // Get first 10 DaySlots
     * const daySlots = await prisma.daySlot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const daySlotWithIdOnly = await prisma.daySlot.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DaySlotFindManyArgs>(
      args?: SelectSubset<T, DaySlotFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DaySlot>>, PrismaPromise<Array<DaySlotGetPayload<T>>>>

    /**
     * Create a DaySlot.
     * @param {DaySlotCreateArgs} args - Arguments to create a DaySlot.
     * @example
     * // Create one DaySlot
     * const DaySlot = await prisma.daySlot.create({
     *   data: {
     *     // ... data to create a DaySlot
     *   }
     * })
     * 
    **/
    create<T extends DaySlotCreateArgs>(
      args: SelectSubset<T, DaySlotCreateArgs>
    ): CheckSelect<T, Prisma__DaySlotClient<DaySlot>, Prisma__DaySlotClient<DaySlotGetPayload<T>>>

    /**
     * Create many DaySlots.
     *     @param {DaySlotCreateManyArgs} args - Arguments to create many DaySlots.
     *     @example
     *     // Create many DaySlots
     *     const daySlot = await prisma.daySlot.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DaySlotCreateManyArgs>(
      args?: SelectSubset<T, DaySlotCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DaySlot.
     * @param {DaySlotDeleteArgs} args - Arguments to delete one DaySlot.
     * @example
     * // Delete one DaySlot
     * const DaySlot = await prisma.daySlot.delete({
     *   where: {
     *     // ... filter to delete one DaySlot
     *   }
     * })
     * 
    **/
    delete<T extends DaySlotDeleteArgs>(
      args: SelectSubset<T, DaySlotDeleteArgs>
    ): CheckSelect<T, Prisma__DaySlotClient<DaySlot>, Prisma__DaySlotClient<DaySlotGetPayload<T>>>

    /**
     * Update one DaySlot.
     * @param {DaySlotUpdateArgs} args - Arguments to update one DaySlot.
     * @example
     * // Update one DaySlot
     * const daySlot = await prisma.daySlot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DaySlotUpdateArgs>(
      args: SelectSubset<T, DaySlotUpdateArgs>
    ): CheckSelect<T, Prisma__DaySlotClient<DaySlot>, Prisma__DaySlotClient<DaySlotGetPayload<T>>>

    /**
     * Delete zero or more DaySlots.
     * @param {DaySlotDeleteManyArgs} args - Arguments to filter DaySlots to delete.
     * @example
     * // Delete a few DaySlots
     * const { count } = await prisma.daySlot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DaySlotDeleteManyArgs>(
      args?: SelectSubset<T, DaySlotDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DaySlots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySlotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DaySlots
     * const daySlot = await prisma.daySlot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DaySlotUpdateManyArgs>(
      args: SelectSubset<T, DaySlotUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DaySlot.
     * @param {DaySlotUpsertArgs} args - Arguments to update or create a DaySlot.
     * @example
     * // Update or create a DaySlot
     * const daySlot = await prisma.daySlot.upsert({
     *   create: {
     *     // ... data to create a DaySlot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DaySlot we want to update
     *   }
     * })
    **/
    upsert<T extends DaySlotUpsertArgs>(
      args: SelectSubset<T, DaySlotUpsertArgs>
    ): CheckSelect<T, Prisma__DaySlotClient<DaySlot>, Prisma__DaySlotClient<DaySlotGetPayload<T>>>

    /**
     * Count the number of DaySlots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySlotCountArgs} args - Arguments to filter DaySlots to count.
     * @example
     * // Count the number of DaySlots
     * const count = await prisma.daySlot.count({
     *   where: {
     *     // ... the filter for the DaySlots we want to count
     *   }
     * })
    **/
    count<T extends DaySlotCountArgs>(
      args?: Subset<T, DaySlotCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DaySlotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DaySlot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySlotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DaySlotAggregateArgs>(args: Subset<T, DaySlotAggregateArgs>): PrismaPromise<GetDaySlotAggregateType<T>>

    /**
     * Group by DaySlot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySlotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DaySlotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DaySlotGroupByArgs['orderBy'] }
        : { orderBy?: DaySlotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DaySlotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDaySlotGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for DaySlot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DaySlotClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    property<T extends PropertyArgs = {}>(args?: Subset<T, PropertyArgs>): CheckSelect<T, Prisma__PropertyClient<Property | null >, Prisma__PropertyClient<PropertyGetPayload<T> | null >>;

    booking<T extends BookingArgs = {}>(args?: Subset<T, BookingArgs>): CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * DaySlot findUnique
   */
  export type DaySlotFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the DaySlot
     * 
    **/
    select?: DaySlotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DaySlotInclude | null
    /**
     * Throw an Error if a DaySlot can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DaySlot to fetch.
     * 
    **/
    where: DaySlotWhereUniqueInput
  }


  /**
   * DaySlot findFirst
   */
  export type DaySlotFindFirstArgs = {
    /**
     * Select specific fields to fetch from the DaySlot
     * 
    **/
    select?: DaySlotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DaySlotInclude | null
    /**
     * Throw an Error if a DaySlot can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DaySlot to fetch.
     * 
    **/
    where?: DaySlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaySlots to fetch.
     * 
    **/
    orderBy?: Enumerable<DaySlotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DaySlots.
     * 
    **/
    cursor?: DaySlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaySlots from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaySlots.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DaySlots.
     * 
    **/
    distinct?: Enumerable<DaySlotScalarFieldEnum>
  }


  /**
   * DaySlot findMany
   */
  export type DaySlotFindManyArgs = {
    /**
     * Select specific fields to fetch from the DaySlot
     * 
    **/
    select?: DaySlotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DaySlotInclude | null
    /**
     * Filter, which DaySlots to fetch.
     * 
    **/
    where?: DaySlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaySlots to fetch.
     * 
    **/
    orderBy?: Enumerable<DaySlotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DaySlots.
     * 
    **/
    cursor?: DaySlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaySlots from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaySlots.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DaySlotScalarFieldEnum>
  }


  /**
   * DaySlot create
   */
  export type DaySlotCreateArgs = {
    /**
     * Select specific fields to fetch from the DaySlot
     * 
    **/
    select?: DaySlotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DaySlotInclude | null
    /**
     * The data needed to create a DaySlot.
     * 
    **/
    data: XOR<DaySlotCreateInput, DaySlotUncheckedCreateInput>
  }


  /**
   * DaySlot createMany
   */
  export type DaySlotCreateManyArgs = {
    /**
     * The data used to create many DaySlots.
     * 
    **/
    data: Enumerable<DaySlotCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DaySlot update
   */
  export type DaySlotUpdateArgs = {
    /**
     * Select specific fields to fetch from the DaySlot
     * 
    **/
    select?: DaySlotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DaySlotInclude | null
    /**
     * The data needed to update a DaySlot.
     * 
    **/
    data: XOR<DaySlotUpdateInput, DaySlotUncheckedUpdateInput>
    /**
     * Choose, which DaySlot to update.
     * 
    **/
    where: DaySlotWhereUniqueInput
  }


  /**
   * DaySlot updateMany
   */
  export type DaySlotUpdateManyArgs = {
    /**
     * The data used to update DaySlots.
     * 
    **/
    data: XOR<DaySlotUpdateManyMutationInput, DaySlotUncheckedUpdateManyInput>
    /**
     * Filter which DaySlots to update
     * 
    **/
    where?: DaySlotWhereInput
  }


  /**
   * DaySlot upsert
   */
  export type DaySlotUpsertArgs = {
    /**
     * Select specific fields to fetch from the DaySlot
     * 
    **/
    select?: DaySlotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DaySlotInclude | null
    /**
     * The filter to search for the DaySlot to update in case it exists.
     * 
    **/
    where: DaySlotWhereUniqueInput
    /**
     * In case the DaySlot found by the `where` argument doesn't exist, create a new DaySlot with this data.
     * 
    **/
    create: XOR<DaySlotCreateInput, DaySlotUncheckedCreateInput>
    /**
     * In case the DaySlot was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DaySlotUpdateInput, DaySlotUncheckedUpdateInput>
  }


  /**
   * DaySlot delete
   */
  export type DaySlotDeleteArgs = {
    /**
     * Select specific fields to fetch from the DaySlot
     * 
    **/
    select?: DaySlotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DaySlotInclude | null
    /**
     * Filter which DaySlot to delete.
     * 
    **/
    where: DaySlotWhereUniqueInput
  }


  /**
   * DaySlot deleteMany
   */
  export type DaySlotDeleteManyArgs = {
    /**
     * Filter which DaySlots to delete
     * 
    **/
    where?: DaySlotWhereInput
  }


  /**
   * DaySlot without action
   */
  export type DaySlotArgs = {
    /**
     * Select specific fields to fetch from the DaySlot
     * 
    **/
    select?: DaySlotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DaySlotInclude | null
  }



  /**
   * Model Property
   */


  export type AggregateProperty = {
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  export type PropertyAvgAggregateOutputType = {
    size: number | null
    zip: number | null
    hourlyPrice: number | null
    serviceFee: number | null
    deposit: number | null
  }

  export type PropertySumAggregateOutputType = {
    size: number | null
    zip: number | null
    hourlyPrice: number | null
    serviceFee: number | null
    deposit: number | null
  }

  export type PropertyMinAggregateOutputType = {
    kind: ModelKind | null
    id: string | null
    handle: string | null
    title: string | null
    size: number | null
    ownerId: string | null
    street: string | null
    streetNumber: string | null
    zip: number | null
    city: string | null
    description: string | null
    pickup: boolean | null
    isVerified: boolean | null
    hourlyPrice: number | null
    serviceFee: number | null
    deposit: number | null
    partialSpace: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyMaxAggregateOutputType = {
    kind: ModelKind | null
    id: string | null
    handle: string | null
    title: string | null
    size: number | null
    ownerId: string | null
    street: string | null
    streetNumber: string | null
    zip: number | null
    city: string | null
    description: string | null
    pickup: boolean | null
    isVerified: boolean | null
    hourlyPrice: number | null
    serviceFee: number | null
    deposit: number | null
    partialSpace: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyCountAggregateOutputType = {
    kind: number
    id: number
    handle: number
    title: number
    size: number
    ownerId: number
    street: number
    streetNumber: number
    zip: number
    city: number
    description: number
    pickup: number
    isVerified: number
    hourlyPrice: number
    serviceFee: number
    rules: number
    deposit: number
    images: number
    partialSpace: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PropertyAvgAggregateInputType = {
    size?: true
    zip?: true
    hourlyPrice?: true
    serviceFee?: true
    deposit?: true
  }

  export type PropertySumAggregateInputType = {
    size?: true
    zip?: true
    hourlyPrice?: true
    serviceFee?: true
    deposit?: true
  }

  export type PropertyMinAggregateInputType = {
    kind?: true
    id?: true
    handle?: true
    title?: true
    size?: true
    ownerId?: true
    street?: true
    streetNumber?: true
    zip?: true
    city?: true
    description?: true
    pickup?: true
    isVerified?: true
    hourlyPrice?: true
    serviceFee?: true
    deposit?: true
    partialSpace?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyMaxAggregateInputType = {
    kind?: true
    id?: true
    handle?: true
    title?: true
    size?: true
    ownerId?: true
    street?: true
    streetNumber?: true
    zip?: true
    city?: true
    description?: true
    pickup?: true
    isVerified?: true
    hourlyPrice?: true
    serviceFee?: true
    deposit?: true
    partialSpace?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyCountAggregateInputType = {
    kind?: true
    id?: true
    handle?: true
    title?: true
    size?: true
    ownerId?: true
    street?: true
    streetNumber?: true
    zip?: true
    city?: true
    description?: true
    pickup?: true
    isVerified?: true
    hourlyPrice?: true
    serviceFee?: true
    rules?: true
    deposit?: true
    images?: true
    partialSpace?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PropertyAggregateArgs = {
    /**
     * Filter which Property to aggregate.
     * 
    **/
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     * 
    **/
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Properties
    **/
    _count?: true | PropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyMaxAggregateInputType
  }

  export type GetPropertyAggregateType<T extends PropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProperty[P]>
      : GetScalarType<T[P], AggregateProperty[P]>
  }




  export type PropertyGroupByArgs = {
    where?: PropertyWhereInput
    orderBy?: Enumerable<PropertyOrderByWithAggregationInput>
    by: Array<PropertyScalarFieldEnum>
    having?: PropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyCountAggregateInputType | true
    _avg?: PropertyAvgAggregateInputType
    _sum?: PropertySumAggregateInputType
    _min?: PropertyMinAggregateInputType
    _max?: PropertyMaxAggregateInputType
  }


  export type PropertyGroupByOutputType = {
    kind: ModelKind
    id: string
    handle: string
    title: string
    size: number
    ownerId: string
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup: boolean
    isVerified: boolean
    hourlyPrice: number
    serviceFee: number
    rules: string[]
    deposit: number
    images: string[]
    partialSpace: boolean
    createdAt: Date
    updatedAt: Date
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  type GetPropertyGroupByPayload<T extends PropertyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyGroupByOutputType[P]>
        }
      >
    >


  export type PropertySelect = {
    kind?: boolean
    id?: boolean
    handle?: boolean
    title?: boolean
    size?: boolean
    ownerId?: boolean
    owner?: boolean | UserArgs
    bookings?: boolean | BookingFindManyArgs
    street?: boolean
    streetNumber?: boolean
    zip?: boolean
    city?: boolean
    description?: boolean
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice?: boolean
    serviceFee?: boolean
    rules?: boolean
    deposit?: boolean
    images?: boolean
    partialSpace?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    daySlots?: boolean | DaySlotFindManyArgs
    _count?: boolean | PropertyCountOutputTypeArgs
  }

  export type PropertyInclude = {
    owner?: boolean | UserArgs
    bookings?: boolean | BookingFindManyArgs
    daySlots?: boolean | DaySlotFindManyArgs
    _count?: boolean | PropertyCountOutputTypeArgs
  }

  export type PropertyGetPayload<
    S extends boolean | null | undefined | PropertyArgs,
    U = keyof S
      > = S extends true
        ? Property
    : S extends undefined
    ? never
    : S extends PropertyArgs | PropertyFindManyArgs
    ?'include' extends U
    ? Property  & {
    [P in TrueKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends 'bookings' ? Array < BookingGetPayload<S['include'][P]>>  :
        P extends 'daySlots' ? Array < DaySlotGetPayload<S['include'][P]>>  :
        P extends '_count' ? PropertyCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends 'bookings' ? Array < BookingGetPayload<S['select'][P]>>  :
        P extends 'daySlots' ? Array < DaySlotGetPayload<S['select'][P]>>  :
        P extends '_count' ? PropertyCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Property ? Property[P] : never
  } 
    : Property
  : Property


  type PropertyCountArgs = Merge<
    Omit<PropertyFindManyArgs, 'select' | 'include'> & {
      select?: PropertyCountAggregateInputType | true
    }
  >

  export interface PropertyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Property that matches the filter.
     * @param {PropertyFindUniqueArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PropertyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PropertyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Property'> extends True ? CheckSelect<T, Prisma__PropertyClient<Property>, Prisma__PropertyClient<PropertyGetPayload<T>>> : CheckSelect<T, Prisma__PropertyClient<Property | null >, Prisma__PropertyClient<PropertyGetPayload<T> | null >>

    /**
     * Find the first Property that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PropertyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PropertyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Property'> extends True ? CheckSelect<T, Prisma__PropertyClient<Property>, Prisma__PropertyClient<PropertyGetPayload<T>>> : CheckSelect<T, Prisma__PropertyClient<Property | null >, Prisma__PropertyClient<PropertyGetPayload<T> | null >>

    /**
     * Find zero or more Properties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Properties
     * const properties = await prisma.property.findMany()
     * 
     * // Get first 10 Properties
     * const properties = await prisma.property.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyWithIdOnly = await prisma.property.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PropertyFindManyArgs>(
      args?: SelectSubset<T, PropertyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Property>>, PrismaPromise<Array<PropertyGetPayload<T>>>>

    /**
     * Create a Property.
     * @param {PropertyCreateArgs} args - Arguments to create a Property.
     * @example
     * // Create one Property
     * const Property = await prisma.property.create({
     *   data: {
     *     // ... data to create a Property
     *   }
     * })
     * 
    **/
    create<T extends PropertyCreateArgs>(
      args: SelectSubset<T, PropertyCreateArgs>
    ): CheckSelect<T, Prisma__PropertyClient<Property>, Prisma__PropertyClient<PropertyGetPayload<T>>>

    /**
     * Create many Properties.
     *     @param {PropertyCreateManyArgs} args - Arguments to create many Properties.
     *     @example
     *     // Create many Properties
     *     const property = await prisma.property.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PropertyCreateManyArgs>(
      args?: SelectSubset<T, PropertyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Property.
     * @param {PropertyDeleteArgs} args - Arguments to delete one Property.
     * @example
     * // Delete one Property
     * const Property = await prisma.property.delete({
     *   where: {
     *     // ... filter to delete one Property
     *   }
     * })
     * 
    **/
    delete<T extends PropertyDeleteArgs>(
      args: SelectSubset<T, PropertyDeleteArgs>
    ): CheckSelect<T, Prisma__PropertyClient<Property>, Prisma__PropertyClient<PropertyGetPayload<T>>>

    /**
     * Update one Property.
     * @param {PropertyUpdateArgs} args - Arguments to update one Property.
     * @example
     * // Update one Property
     * const property = await prisma.property.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PropertyUpdateArgs>(
      args: SelectSubset<T, PropertyUpdateArgs>
    ): CheckSelect<T, Prisma__PropertyClient<Property>, Prisma__PropertyClient<PropertyGetPayload<T>>>

    /**
     * Delete zero or more Properties.
     * @param {PropertyDeleteManyArgs} args - Arguments to filter Properties to delete.
     * @example
     * // Delete a few Properties
     * const { count } = await prisma.property.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PropertyDeleteManyArgs>(
      args?: SelectSubset<T, PropertyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Properties
     * const property = await prisma.property.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PropertyUpdateManyArgs>(
      args: SelectSubset<T, PropertyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Property.
     * @param {PropertyUpsertArgs} args - Arguments to update or create a Property.
     * @example
     * // Update or create a Property
     * const property = await prisma.property.upsert({
     *   create: {
     *     // ... data to create a Property
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Property we want to update
     *   }
     * })
    **/
    upsert<T extends PropertyUpsertArgs>(
      args: SelectSubset<T, PropertyUpsertArgs>
    ): CheckSelect<T, Prisma__PropertyClient<Property>, Prisma__PropertyClient<PropertyGetPayload<T>>>

    /**
     * Count the number of Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyCountArgs} args - Arguments to filter Properties to count.
     * @example
     * // Count the number of Properties
     * const count = await prisma.property.count({
     *   where: {
     *     // ... the filter for the Properties we want to count
     *   }
     * })
    **/
    count<T extends PropertyCountArgs>(
      args?: Subset<T, PropertyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyAggregateArgs>(args: Subset<T, PropertyAggregateArgs>): PrismaPromise<GetPropertyAggregateType<T>>

    /**
     * Group by Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyGroupByArgs['orderBy'] }
        : { orderBy?: PropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Property.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PropertyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    owner<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    bookings<T extends BookingFindManyArgs = {}>(args?: Subset<T, BookingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>;

    daySlots<T extends DaySlotFindManyArgs = {}>(args?: Subset<T, DaySlotFindManyArgs>): CheckSelect<T, PrismaPromise<Array<DaySlot>>, PrismaPromise<Array<DaySlotGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Property findUnique
   */
  export type PropertyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Property
     * 
    **/
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyInclude | null
    /**
     * Throw an Error if a Property can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Property to fetch.
     * 
    **/
    where: PropertyWhereUniqueInput
  }


  /**
   * Property findFirst
   */
  export type PropertyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Property
     * 
    **/
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyInclude | null
    /**
     * Throw an Error if a Property can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Property to fetch.
     * 
    **/
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     * 
    **/
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     * 
    **/
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     * 
    **/
    distinct?: Enumerable<PropertyScalarFieldEnum>
  }


  /**
   * Property findMany
   */
  export type PropertyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Property
     * 
    **/
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyInclude | null
    /**
     * Filter, which Properties to fetch.
     * 
    **/
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     * 
    **/
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Properties.
     * 
    **/
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PropertyScalarFieldEnum>
  }


  /**
   * Property create
   */
  export type PropertyCreateArgs = {
    /**
     * Select specific fields to fetch from the Property
     * 
    **/
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyInclude | null
    /**
     * The data needed to create a Property.
     * 
    **/
    data: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
  }


  /**
   * Property createMany
   */
  export type PropertyCreateManyArgs = {
    /**
     * The data used to create many Properties.
     * 
    **/
    data: Enumerable<PropertyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Property update
   */
  export type PropertyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Property
     * 
    **/
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyInclude | null
    /**
     * The data needed to update a Property.
     * 
    **/
    data: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
    /**
     * Choose, which Property to update.
     * 
    **/
    where: PropertyWhereUniqueInput
  }


  /**
   * Property updateMany
   */
  export type PropertyUpdateManyArgs = {
    /**
     * The data used to update Properties.
     * 
    **/
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyInput>
    /**
     * Filter which Properties to update
     * 
    **/
    where?: PropertyWhereInput
  }


  /**
   * Property upsert
   */
  export type PropertyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Property
     * 
    **/
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyInclude | null
    /**
     * The filter to search for the Property to update in case it exists.
     * 
    **/
    where: PropertyWhereUniqueInput
    /**
     * In case the Property found by the `where` argument doesn't exist, create a new Property with this data.
     * 
    **/
    create: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
    /**
     * In case the Property was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
  }


  /**
   * Property delete
   */
  export type PropertyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Property
     * 
    **/
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyInclude | null
    /**
     * Filter which Property to delete.
     * 
    **/
    where: PropertyWhereUniqueInput
  }


  /**
   * Property deleteMany
   */
  export type PropertyDeleteManyArgs = {
    /**
     * Filter which Properties to delete
     * 
    **/
    where?: PropertyWhereInput
  }


  /**
   * Property without action
   */
  export type PropertyArgs = {
    /**
     * Select specific fields to fetch from the Property
     * 
    **/
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyInclude | null
  }



  /**
   * Model Booking
   */


  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    totalPrice: number | null
  }

  export type BookingSumAggregateOutputType = {
    totalPrice: number | null
  }

  export type BookingMinAggregateOutputType = {
    kind: ModelKind | null
    id: string | null
    tenantId: string | null
    propertyId: string | null
    bookingStatus: BookingStatus | null
    totalPrice: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    frequency: Frequency | null
  }

  export type BookingMaxAggregateOutputType = {
    kind: ModelKind | null
    id: string | null
    tenantId: string | null
    propertyId: string | null
    bookingStatus: BookingStatus | null
    totalPrice: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    frequency: Frequency | null
  }

  export type BookingCountAggregateOutputType = {
    kind: number
    id: number
    tenantId: number
    propertyId: number
    bookingStatus: number
    totalPrice: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    frequency: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    totalPrice?: true
  }

  export type BookingSumAggregateInputType = {
    totalPrice?: true
  }

  export type BookingMinAggregateInputType = {
    kind?: true
    id?: true
    tenantId?: true
    propertyId?: true
    bookingStatus?: true
    totalPrice?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    frequency?: true
  }

  export type BookingMaxAggregateInputType = {
    kind?: true
    id?: true
    tenantId?: true
    propertyId?: true
    bookingStatus?: true
    totalPrice?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    frequency?: true
  }

  export type BookingCountAggregateInputType = {
    kind?: true
    id?: true
    tenantId?: true
    propertyId?: true
    bookingStatus?: true
    totalPrice?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    frequency?: true
    _all?: true
  }

  export type BookingAggregateArgs = {
    /**
     * Filter which Booking to aggregate.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs = {
    where?: BookingWhereInput
    orderBy?: Enumerable<BookingOrderByWithAggregationInput>
    by: Array<BookingScalarFieldEnum>
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }


  export type BookingGroupByOutputType = {
    kind: ModelKind
    id: string
    tenantId: string
    propertyId: string
    bookingStatus: BookingStatus
    totalPrice: number
    startDate: Date
    endDate: Date
    createdAt: Date
    updatedAt: Date
    frequency: Frequency
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect = {
    kind?: boolean
    id?: boolean
    tenantId?: boolean
    tenant?: boolean | UserArgs
    propertyId?: boolean
    property?: boolean | PropertyArgs
    bookingStatus?: boolean
    totalPrice?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    daySlots?: boolean | DaySlotFindManyArgs
    frequency?: boolean
    _count?: boolean | BookingCountOutputTypeArgs
  }

  export type BookingInclude = {
    tenant?: boolean | UserArgs
    property?: boolean | PropertyArgs
    daySlots?: boolean | DaySlotFindManyArgs
    _count?: boolean | BookingCountOutputTypeArgs
  }

  export type BookingGetPayload<
    S extends boolean | null | undefined | BookingArgs,
    U = keyof S
      > = S extends true
        ? Booking
    : S extends undefined
    ? never
    : S extends BookingArgs | BookingFindManyArgs
    ?'include' extends U
    ? Booking  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tenant' ? UserGetPayload<S['include'][P]> :
        P extends 'property' ? PropertyGetPayload<S['include'][P]> :
        P extends 'daySlots' ? Array < DaySlotGetPayload<S['include'][P]>>  :
        P extends '_count' ? BookingCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tenant' ? UserGetPayload<S['select'][P]> :
        P extends 'property' ? PropertyGetPayload<S['select'][P]> :
        P extends 'daySlots' ? Array < DaySlotGetPayload<S['select'][P]>>  :
        P extends '_count' ? BookingCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Booking ? Booking[P] : never
  } 
    : Booking
  : Booking


  type BookingCountArgs = Merge<
    Omit<BookingFindManyArgs, 'select' | 'include'> & {
      select?: BookingCountAggregateInputType | true
    }
  >

  export interface BookingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Booking'> extends True ? CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>> : CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Booking'> extends True ? CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>> : CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookingFindManyArgs>(
      args?: SelectSubset<T, BookingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
    **/
    create<T extends BookingCreateArgs>(
      args: SelectSubset<T, BookingCreateArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Create many Bookings.
     *     @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     *     @example
     *     // Create many Bookings
     *     const booking = await prisma.booking.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookingCreateManyArgs>(
      args?: SelectSubset<T, BookingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
    **/
    delete<T extends BookingDeleteArgs>(
      args: SelectSubset<T, BookingDeleteArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookingUpdateArgs>(
      args: SelectSubset<T, BookingUpdateArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookingDeleteManyArgs>(
      args?: SelectSubset<T, BookingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookingUpdateManyArgs>(
      args: SelectSubset<T, BookingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
    **/
    upsert<T extends BookingUpsertArgs>(
      args: SelectSubset<T, BookingUpsertArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tenant<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    property<T extends PropertyArgs = {}>(args?: Subset<T, PropertyArgs>): CheckSelect<T, Prisma__PropertyClient<Property | null >, Prisma__PropertyClient<PropertyGetPayload<T> | null >>;

    daySlots<T extends DaySlotFindManyArgs = {}>(args?: Subset<T, DaySlotFindManyArgs>): CheckSelect<T, PrismaPromise<Array<DaySlot>>, PrismaPromise<Array<DaySlotGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Booking findUnique
   */
  export type BookingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Throw an Error if a Booking can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Booking to fetch.
     * 
    **/
    where: BookingWhereUniqueInput
  }


  /**
   * Booking findFirst
   */
  export type BookingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Throw an Error if a Booking can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Booking to fetch.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     * 
    **/
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * Booking findMany
   */
  export type BookingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter, which Bookings to fetch.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * Booking create
   */
  export type BookingCreateArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The data needed to create a Booking.
     * 
    **/
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }


  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs = {
    /**
     * The data used to create many Bookings.
     * 
    **/
    data: Enumerable<BookingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Booking update
   */
  export type BookingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The data needed to update a Booking.
     * 
    **/
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     * 
    **/
    where: BookingWhereUniqueInput
  }


  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs = {
    /**
     * The data used to update Bookings.
     * 
    **/
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     * 
    **/
    where?: BookingWhereInput
  }


  /**
   * Booking upsert
   */
  export type BookingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The filter to search for the Booking to update in case it exists.
     * 
    **/
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     * 
    **/
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }


  /**
   * Booking delete
   */
  export type BookingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter which Booking to delete.
     * 
    **/
    where: BookingWhereUniqueInput
  }


  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs = {
    /**
     * Filter which Bookings to delete
     * 
    **/
    where?: BookingWhereInput
  }


  /**
   * Booking without action
   */
  export type BookingArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    kind: 'kind',
    handle: 'handle',
    fullName: 'fullName',
    stripeId: 'stripeId',
    email: 'email',
    id: 'id',
    image: 'image',
    dob: 'dob',
    zip: 'zip',
    description: 'description',
    isVerified: 'isVerified',
    role: 'role',
    superOwner: 'superOwner',
    passportS3Id: 'passportS3Id',
    passportVerified: 'passportVerified',
    licenseS3Id: 'licenseS3Id',
    licenseVerified: 'licenseVerified',
    solvencyS3Id: 'solvencyS3Id',
    solvencyVerified: 'solvencyVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const DaySlotScalarFieldEnum: {
    kind: 'kind',
    id: 'id',
    startTime: 'startTime',
    endTime: 'endTime',
    bookedStartTime: 'bookedStartTime',
    bookedEndTime: 'bookedEndTime',
    propertyId: 'propertyId',
    bookingId: 'bookingId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DaySlotScalarFieldEnum = (typeof DaySlotScalarFieldEnum)[keyof typeof DaySlotScalarFieldEnum]


  export const PropertyScalarFieldEnum: {
    kind: 'kind',
    id: 'id',
    handle: 'handle',
    title: 'title',
    size: 'size',
    ownerId: 'ownerId',
    street: 'street',
    streetNumber: 'streetNumber',
    zip: 'zip',
    city: 'city',
    description: 'description',
    pickup: 'pickup',
    isVerified: 'isVerified',
    hourlyPrice: 'hourlyPrice',
    serviceFee: 'serviceFee',
    rules: 'rules',
    deposit: 'deposit',
    images: 'images',
    partialSpace: 'partialSpace',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PropertyScalarFieldEnum = (typeof PropertyScalarFieldEnum)[keyof typeof PropertyScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    kind: 'kind',
    id: 'id',
    tenantId: 'tenantId',
    propertyId: 'propertyId',
    bookingStatus: 'bookingStatus',
    totalPrice: 'totalPrice',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    frequency: 'frequency'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    kind?: EnumModelKindFilter | ModelKind
    handle?: StringFilter | string
    fullName?: StringFilter | string
    stripeId?: StringNullableFilter | string | null
    email?: StringFilter | string
    id?: StringFilter | string
    image?: StringNullableFilter | string | null
    dob?: DateTimeNullableFilter | Date | string | null
    zip?: IntNullableFilter | number | null
    description?: StringNullableFilter | string | null
    isVerified?: BoolFilter | boolean
    role?: EnumRoleFilter | Role
    bookings?: BookingListRelationFilter
    rentingOut?: PropertyListRelationFilter
    superOwner?: BoolFilter | boolean
    passportS3Id?: StringNullableFilter | string | null
    passportVerified?: BoolFilter | boolean
    licenseS3Id?: StringNullableFilter | string | null
    licenseVerified?: BoolFilter | boolean
    solvencyS3Id?: StringNullableFilter | string | null
    solvencyVerified?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    kind?: SortOrder
    handle?: SortOrder
    fullName?: SortOrder
    stripeId?: SortOrder
    email?: SortOrder
    id?: SortOrder
    image?: SortOrder
    dob?: SortOrder
    zip?: SortOrder
    description?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    bookings?: BookingOrderByRelationAggregateInput
    rentingOut?: PropertyOrderByRelationAggregateInput
    superOwner?: SortOrder
    passportS3Id?: SortOrder
    passportVerified?: SortOrder
    licenseS3Id?: SortOrder
    licenseVerified?: SortOrder
    solvencyS3Id?: SortOrder
    solvencyVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    handle?: string
    stripeId?: string
    email?: string
    id?: string
  }

  export type UserOrderByWithAggregationInput = {
    kind?: SortOrder
    handle?: SortOrder
    fullName?: SortOrder
    stripeId?: SortOrder
    email?: SortOrder
    id?: SortOrder
    image?: SortOrder
    dob?: SortOrder
    zip?: SortOrder
    description?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    superOwner?: SortOrder
    passportS3Id?: SortOrder
    passportVerified?: SortOrder
    licenseS3Id?: SortOrder
    licenseVerified?: SortOrder
    solvencyS3Id?: SortOrder
    solvencyVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    kind?: EnumModelKindWithAggregatesFilter | ModelKind
    handle?: StringWithAggregatesFilter | string
    fullName?: StringWithAggregatesFilter | string
    stripeId?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    id?: StringWithAggregatesFilter | string
    image?: StringNullableWithAggregatesFilter | string | null
    dob?: DateTimeNullableWithAggregatesFilter | Date | string | null
    zip?: IntNullableWithAggregatesFilter | number | null
    description?: StringNullableWithAggregatesFilter | string | null
    isVerified?: BoolWithAggregatesFilter | boolean
    role?: EnumRoleWithAggregatesFilter | Role
    superOwner?: BoolWithAggregatesFilter | boolean
    passportS3Id?: StringNullableWithAggregatesFilter | string | null
    passportVerified?: BoolWithAggregatesFilter | boolean
    licenseS3Id?: StringNullableWithAggregatesFilter | string | null
    licenseVerified?: BoolWithAggregatesFilter | boolean
    solvencyS3Id?: StringNullableWithAggregatesFilter | string | null
    solvencyVerified?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type DaySlotWhereInput = {
    AND?: Enumerable<DaySlotWhereInput>
    OR?: Enumerable<DaySlotWhereInput>
    NOT?: Enumerable<DaySlotWhereInput>
    kind?: EnumModelKindFilter | ModelKind
    id?: StringFilter | string
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    bookedStartTime?: DateTimeNullableFilter | Date | string | null
    bookedEndTime?: DateTimeNullableFilter | Date | string | null
    propertyId?: StringFilter | string
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
    bookingId?: StringNullableFilter | string | null
    booking?: XOR<BookingRelationFilter, BookingWhereInput> | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type DaySlotOrderByWithRelationInput = {
    kind?: SortOrder
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bookedStartTime?: SortOrder
    bookedEndTime?: SortOrder
    propertyId?: SortOrder
    property?: PropertyOrderByWithRelationInput
    bookingId?: SortOrder
    booking?: BookingOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DaySlotWhereUniqueInput = {
    id?: string
  }

  export type DaySlotOrderByWithAggregationInput = {
    kind?: SortOrder
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bookedStartTime?: SortOrder
    bookedEndTime?: SortOrder
    propertyId?: SortOrder
    bookingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DaySlotCountOrderByAggregateInput
    _max?: DaySlotMaxOrderByAggregateInput
    _min?: DaySlotMinOrderByAggregateInput
  }

  export type DaySlotScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DaySlotScalarWhereWithAggregatesInput>
    OR?: Enumerable<DaySlotScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DaySlotScalarWhereWithAggregatesInput>
    kind?: EnumModelKindWithAggregatesFilter | ModelKind
    id?: StringWithAggregatesFilter | string
    startTime?: DateTimeWithAggregatesFilter | Date | string
    endTime?: DateTimeWithAggregatesFilter | Date | string
    bookedStartTime?: DateTimeNullableWithAggregatesFilter | Date | string | null
    bookedEndTime?: DateTimeNullableWithAggregatesFilter | Date | string | null
    propertyId?: StringWithAggregatesFilter | string
    bookingId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PropertyWhereInput = {
    AND?: Enumerable<PropertyWhereInput>
    OR?: Enumerable<PropertyWhereInput>
    NOT?: Enumerable<PropertyWhereInput>
    kind?: EnumModelKindFilter | ModelKind
    id?: StringFilter | string
    handle?: StringFilter | string
    title?: StringFilter | string
    size?: IntFilter | number
    ownerId?: StringFilter | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    bookings?: BookingListRelationFilter
    street?: StringFilter | string
    streetNumber?: StringFilter | string
    zip?: IntFilter | number
    city?: StringFilter | string
    description?: StringFilter | string
    pickup?: BoolFilter | boolean
    isVerified?: BoolFilter | boolean
    hourlyPrice?: IntFilter | number
    serviceFee?: IntFilter | number
    rules?: StringNullableListFilter
    deposit?: IntFilter | number
    images?: StringNullableListFilter
    partialSpace?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    daySlots?: DaySlotListRelationFilter
  }

  export type PropertyOrderByWithRelationInput = {
    kind?: SortOrder
    id?: SortOrder
    handle?: SortOrder
    title?: SortOrder
    size?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    bookings?: BookingOrderByRelationAggregateInput
    street?: SortOrder
    streetNumber?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    description?: SortOrder
    pickup?: SortOrder
    isVerified?: SortOrder
    hourlyPrice?: SortOrder
    serviceFee?: SortOrder
    rules?: SortOrder
    deposit?: SortOrder
    images?: SortOrder
    partialSpace?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    daySlots?: DaySlotOrderByRelationAggregateInput
  }

  export type PropertyWhereUniqueInput = {
    id?: string
    handle?: string
  }

  export type PropertyOrderByWithAggregationInput = {
    kind?: SortOrder
    id?: SortOrder
    handle?: SortOrder
    title?: SortOrder
    size?: SortOrder
    ownerId?: SortOrder
    street?: SortOrder
    streetNumber?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    description?: SortOrder
    pickup?: SortOrder
    isVerified?: SortOrder
    hourlyPrice?: SortOrder
    serviceFee?: SortOrder
    rules?: SortOrder
    deposit?: SortOrder
    images?: SortOrder
    partialSpace?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PropertyCountOrderByAggregateInput
    _avg?: PropertyAvgOrderByAggregateInput
    _max?: PropertyMaxOrderByAggregateInput
    _min?: PropertyMinOrderByAggregateInput
    _sum?: PropertySumOrderByAggregateInput
  }

  export type PropertyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PropertyScalarWhereWithAggregatesInput>
    OR?: Enumerable<PropertyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PropertyScalarWhereWithAggregatesInput>
    kind?: EnumModelKindWithAggregatesFilter | ModelKind
    id?: StringWithAggregatesFilter | string
    handle?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    size?: IntWithAggregatesFilter | number
    ownerId?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    streetNumber?: StringWithAggregatesFilter | string
    zip?: IntWithAggregatesFilter | number
    city?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    pickup?: BoolWithAggregatesFilter | boolean
    isVerified?: BoolWithAggregatesFilter | boolean
    hourlyPrice?: IntWithAggregatesFilter | number
    serviceFee?: IntWithAggregatesFilter | number
    rules?: StringNullableListFilter
    deposit?: IntWithAggregatesFilter | number
    images?: StringNullableListFilter
    partialSpace?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BookingWhereInput = {
    AND?: Enumerable<BookingWhereInput>
    OR?: Enumerable<BookingWhereInput>
    NOT?: Enumerable<BookingWhereInput>
    kind?: EnumModelKindFilter | ModelKind
    id?: StringFilter | string
    tenantId?: StringFilter | string
    tenant?: XOR<UserRelationFilter, UserWhereInput>
    propertyId?: StringFilter | string
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
    bookingStatus?: EnumBookingStatusFilter | BookingStatus
    totalPrice?: FloatFilter | number
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    daySlots?: DaySlotListRelationFilter
    frequency?: EnumFrequencyFilter | Frequency
  }

  export type BookingOrderByWithRelationInput = {
    kind?: SortOrder
    id?: SortOrder
    tenantId?: SortOrder
    tenant?: UserOrderByWithRelationInput
    propertyId?: SortOrder
    property?: PropertyOrderByWithRelationInput
    bookingStatus?: SortOrder
    totalPrice?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    daySlots?: DaySlotOrderByRelationAggregateInput
    frequency?: SortOrder
  }

  export type BookingWhereUniqueInput = {
    id?: string
  }

  export type BookingOrderByWithAggregationInput = {
    kind?: SortOrder
    id?: SortOrder
    tenantId?: SortOrder
    propertyId?: SortOrder
    bookingStatus?: SortOrder
    totalPrice?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    frequency?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookingScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookingScalarWhereWithAggregatesInput>
    kind?: EnumModelKindWithAggregatesFilter | ModelKind
    id?: StringWithAggregatesFilter | string
    tenantId?: StringWithAggregatesFilter | string
    propertyId?: StringWithAggregatesFilter | string
    bookingStatus?: EnumBookingStatusWithAggregatesFilter | BookingStatus
    totalPrice?: FloatWithAggregatesFilter | number
    startDate?: DateTimeWithAggregatesFilter | Date | string
    endDate?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    frequency?: EnumFrequencyWithAggregatesFilter | Frequency
  }

  export type UserCreateInput = {
    kind?: ModelKind
    handle: string
    fullName: string
    stripeId?: string | null
    email: string
    id?: string
    image?: string | null
    dob?: Date | string | null
    zip?: number | null
    description?: string | null
    isVerified?: boolean
    role: Role
    bookings?: BookingCreateNestedManyWithoutTenantInput
    rentingOut?: PropertyCreateNestedManyWithoutOwnerInput
    superOwner?: boolean
    passportS3Id?: string | null
    passportVerified?: boolean
    licenseS3Id?: string | null
    licenseVerified?: boolean
    solvencyS3Id?: string | null
    solvencyVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    kind?: ModelKind
    handle: string
    fullName: string
    stripeId?: string | null
    email: string
    id?: string
    image?: string | null
    dob?: Date | string | null
    zip?: number | null
    description?: string | null
    isVerified?: boolean
    role: Role
    bookings?: BookingUncheckedCreateNestedManyWithoutTenantInput
    rentingOut?: PropertyUncheckedCreateNestedManyWithoutOwnerInput
    superOwner?: boolean
    passportS3Id?: string | null
    passportVerified?: boolean
    licenseS3Id?: string | null
    licenseVerified?: boolean
    solvencyS3Id?: string | null
    solvencyVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    handle?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zip?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    bookings?: BookingUpdateManyWithoutTenantInput
    rentingOut?: PropertyUpdateManyWithoutOwnerInput
    superOwner?: BoolFieldUpdateOperationsInput | boolean
    passportS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    passportVerified?: BoolFieldUpdateOperationsInput | boolean
    licenseS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    licenseVerified?: BoolFieldUpdateOperationsInput | boolean
    solvencyS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    solvencyVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    handle?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zip?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    bookings?: BookingUncheckedUpdateManyWithoutTenantInput
    rentingOut?: PropertyUncheckedUpdateManyWithoutOwnerInput
    superOwner?: BoolFieldUpdateOperationsInput | boolean
    passportS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    passportVerified?: BoolFieldUpdateOperationsInput | boolean
    licenseS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    licenseVerified?: BoolFieldUpdateOperationsInput | boolean
    solvencyS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    solvencyVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    kind?: ModelKind
    handle: string
    fullName: string
    stripeId?: string | null
    email: string
    id?: string
    image?: string | null
    dob?: Date | string | null
    zip?: number | null
    description?: string | null
    isVerified?: boolean
    role: Role
    superOwner?: boolean
    passportS3Id?: string | null
    passportVerified?: boolean
    licenseS3Id?: string | null
    licenseVerified?: boolean
    solvencyS3Id?: string | null
    solvencyVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    handle?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zip?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    superOwner?: BoolFieldUpdateOperationsInput | boolean
    passportS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    passportVerified?: BoolFieldUpdateOperationsInput | boolean
    licenseS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    licenseVerified?: BoolFieldUpdateOperationsInput | boolean
    solvencyS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    solvencyVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    handle?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zip?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    superOwner?: BoolFieldUpdateOperationsInput | boolean
    passportS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    passportVerified?: BoolFieldUpdateOperationsInput | boolean
    licenseS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    licenseVerified?: BoolFieldUpdateOperationsInput | boolean
    solvencyS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    solvencyVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DaySlotCreateInput = {
    kind?: ModelKind
    id?: string
    startTime: Date | string
    endTime: Date | string
    bookedStartTime?: Date | string | null
    bookedEndTime?: Date | string | null
    property: PropertyCreateNestedOneWithoutDaySlotsInput
    booking?: BookingCreateNestedOneWithoutDaySlotsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DaySlotUncheckedCreateInput = {
    kind?: ModelKind
    id?: string
    startTime: Date | string
    endTime: Date | string
    bookedStartTime?: Date | string | null
    bookedEndTime?: Date | string | null
    propertyId: string
    bookingId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DaySlotUpdateInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    bookedStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookedEndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    property?: PropertyUpdateOneRequiredWithoutDaySlotsInput
    booking?: BookingUpdateOneWithoutDaySlotsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DaySlotUncheckedUpdateInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    bookedStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookedEndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    propertyId?: StringFieldUpdateOperationsInput | string
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DaySlotCreateManyInput = {
    kind?: ModelKind
    id?: string
    startTime: Date | string
    endTime: Date | string
    bookedStartTime?: Date | string | null
    bookedEndTime?: Date | string | null
    propertyId: string
    bookingId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DaySlotUpdateManyMutationInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    bookedStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookedEndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DaySlotUncheckedUpdateManyInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    bookedStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookedEndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    propertyId?: StringFieldUpdateOperationsInput | string
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyCreateInput = {
    kind?: ModelKind
    id?: string
    handle: string
    title: string
    size: number
    owner: UserCreateNestedOneWithoutRentingOutInput
    bookings?: BookingCreateNestedManyWithoutPropertyInput
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice: number
    serviceFee: number
    rules?: PropertyCreaterulesInput | Enumerable<string>
    deposit: number
    images?: PropertyCreateimagesInput | Enumerable<string>
    partialSpace?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUncheckedCreateInput = {
    kind?: ModelKind
    id?: string
    handle: string
    title: string
    size: number
    ownerId: string
    bookings?: BookingUncheckedCreateNestedManyWithoutPropertyInput
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice: number
    serviceFee: number
    rules?: PropertyCreaterulesInput | Enumerable<string>
    deposit: number
    images?: PropertyCreateimagesInput | Enumerable<string>
    partialSpace?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUpdateInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    owner?: UserUpdateOneRequiredWithoutRentingOutInput
    bookings?: BookingUpdateManyWithoutPropertyInput
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUpdateManyWithoutPropertyInput
  }

  export type PropertyUncheckedUpdateInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    bookings?: BookingUncheckedUpdateManyWithoutPropertyInput
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUncheckedUpdateManyWithoutPropertyInput
  }

  export type PropertyCreateManyInput = {
    kind?: ModelKind
    id?: string
    handle: string
    title: string
    size: number
    ownerId: string
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice: number
    serviceFee: number
    rules?: PropertyCreaterulesInput | Enumerable<string>
    deposit: number
    images?: PropertyCreateimagesInput | Enumerable<string>
    partialSpace?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyUpdateManyMutationInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUncheckedUpdateManyInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCreateInput = {
    kind?: ModelKind
    id?: string
    tenant: UserCreateNestedOneWithoutBookingsInput
    property: PropertyCreateNestedOneWithoutBookingsInput
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotCreateNestedManyWithoutBookingInput
    frequency: Frequency
  }

  export type BookingUncheckedCreateInput = {
    kind?: ModelKind
    id?: string
    tenantId: string
    propertyId: string
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotUncheckedCreateNestedManyWithoutBookingInput
    frequency: Frequency
  }

  export type BookingUpdateInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    tenant?: UserUpdateOneRequiredWithoutBookingsInput
    property?: PropertyUpdateOneRequiredWithoutBookingsInput
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUpdateManyWithoutBookingInput
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type BookingUncheckedUpdateInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    propertyId?: StringFieldUpdateOperationsInput | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUncheckedUpdateManyWithoutBookingInput
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type BookingCreateManyInput = {
    kind?: ModelKind
    id?: string
    tenantId: string
    propertyId: string
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    frequency: Frequency
  }

  export type BookingUpdateManyMutationInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type BookingUncheckedUpdateManyInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    propertyId?: StringFieldUpdateOperationsInput | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type EnumModelKindFilter = {
    equals?: ModelKind
    in?: Enumerable<ModelKind>
    notIn?: Enumerable<ModelKind>
    not?: NestedEnumModelKindFilter | ModelKind
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type PropertyListRelationFilter = {
    every?: PropertyWhereInput
    some?: PropertyWhereInput
    none?: PropertyWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PropertyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    kind?: SortOrder
    handle?: SortOrder
    fullName?: SortOrder
    stripeId?: SortOrder
    email?: SortOrder
    id?: SortOrder
    image?: SortOrder
    dob?: SortOrder
    zip?: SortOrder
    description?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    superOwner?: SortOrder
    passportS3Id?: SortOrder
    passportVerified?: SortOrder
    licenseS3Id?: SortOrder
    licenseVerified?: SortOrder
    solvencyS3Id?: SortOrder
    solvencyVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    zip?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    kind?: SortOrder
    handle?: SortOrder
    fullName?: SortOrder
    stripeId?: SortOrder
    email?: SortOrder
    id?: SortOrder
    image?: SortOrder
    dob?: SortOrder
    zip?: SortOrder
    description?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    superOwner?: SortOrder
    passportS3Id?: SortOrder
    passportVerified?: SortOrder
    licenseS3Id?: SortOrder
    licenseVerified?: SortOrder
    solvencyS3Id?: SortOrder
    solvencyVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    kind?: SortOrder
    handle?: SortOrder
    fullName?: SortOrder
    stripeId?: SortOrder
    email?: SortOrder
    id?: SortOrder
    image?: SortOrder
    dob?: SortOrder
    zip?: SortOrder
    description?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    superOwner?: SortOrder
    passportS3Id?: SortOrder
    passportVerified?: SortOrder
    licenseS3Id?: SortOrder
    licenseVerified?: SortOrder
    solvencyS3Id?: SortOrder
    solvencyVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    zip?: SortOrder
  }

  export type EnumModelKindWithAggregatesFilter = {
    equals?: ModelKind
    in?: Enumerable<ModelKind>
    notIn?: Enumerable<ModelKind>
    not?: NestedEnumModelKindWithAggregatesFilter | ModelKind
    _count?: NestedIntFilter
    _min?: NestedEnumModelKindFilter
    _max?: NestedEnumModelKindFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type PropertyRelationFilter = {
    is?: PropertyWhereInput
    isNot?: PropertyWhereInput
  }

  export type BookingRelationFilter = {
    is?: BookingWhereInput | null
    isNot?: BookingWhereInput | null
  }

  export type DaySlotCountOrderByAggregateInput = {
    kind?: SortOrder
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bookedStartTime?: SortOrder
    bookedEndTime?: SortOrder
    propertyId?: SortOrder
    bookingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DaySlotMaxOrderByAggregateInput = {
    kind?: SortOrder
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bookedStartTime?: SortOrder
    bookedEndTime?: SortOrder
    propertyId?: SortOrder
    bookingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DaySlotMinOrderByAggregateInput = {
    kind?: SortOrder
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bookedStartTime?: SortOrder
    bookedEndTime?: SortOrder
    propertyId?: SortOrder
    bookingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type DaySlotListRelationFilter = {
    every?: DaySlotWhereInput
    some?: DaySlotWhereInput
    none?: DaySlotWhereInput
  }

  export type DaySlotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PropertyCountOrderByAggregateInput = {
    kind?: SortOrder
    id?: SortOrder
    handle?: SortOrder
    title?: SortOrder
    size?: SortOrder
    ownerId?: SortOrder
    street?: SortOrder
    streetNumber?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    description?: SortOrder
    pickup?: SortOrder
    isVerified?: SortOrder
    hourlyPrice?: SortOrder
    serviceFee?: SortOrder
    rules?: SortOrder
    deposit?: SortOrder
    images?: SortOrder
    partialSpace?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertyAvgOrderByAggregateInput = {
    size?: SortOrder
    zip?: SortOrder
    hourlyPrice?: SortOrder
    serviceFee?: SortOrder
    deposit?: SortOrder
  }

  export type PropertyMaxOrderByAggregateInput = {
    kind?: SortOrder
    id?: SortOrder
    handle?: SortOrder
    title?: SortOrder
    size?: SortOrder
    ownerId?: SortOrder
    street?: SortOrder
    streetNumber?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    description?: SortOrder
    pickup?: SortOrder
    isVerified?: SortOrder
    hourlyPrice?: SortOrder
    serviceFee?: SortOrder
    deposit?: SortOrder
    partialSpace?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertyMinOrderByAggregateInput = {
    kind?: SortOrder
    id?: SortOrder
    handle?: SortOrder
    title?: SortOrder
    size?: SortOrder
    ownerId?: SortOrder
    street?: SortOrder
    streetNumber?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    description?: SortOrder
    pickup?: SortOrder
    isVerified?: SortOrder
    hourlyPrice?: SortOrder
    serviceFee?: SortOrder
    deposit?: SortOrder
    partialSpace?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertySumOrderByAggregateInput = {
    size?: SortOrder
    zip?: SortOrder
    hourlyPrice?: SortOrder
    serviceFee?: SortOrder
    deposit?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EnumBookingStatusFilter = {
    equals?: BookingStatus
    in?: Enumerable<BookingStatus>
    notIn?: Enumerable<BookingStatus>
    not?: NestedEnumBookingStatusFilter | BookingStatus
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type EnumFrequencyFilter = {
    equals?: Frequency
    in?: Enumerable<Frequency>
    notIn?: Enumerable<Frequency>
    not?: NestedEnumFrequencyFilter | Frequency
  }

  export type BookingCountOrderByAggregateInput = {
    kind?: SortOrder
    id?: SortOrder
    tenantId?: SortOrder
    propertyId?: SortOrder
    bookingStatus?: SortOrder
    totalPrice?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    frequency?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    totalPrice?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    kind?: SortOrder
    id?: SortOrder
    tenantId?: SortOrder
    propertyId?: SortOrder
    bookingStatus?: SortOrder
    totalPrice?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    frequency?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    kind?: SortOrder
    id?: SortOrder
    tenantId?: SortOrder
    propertyId?: SortOrder
    bookingStatus?: SortOrder
    totalPrice?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    frequency?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    totalPrice?: SortOrder
  }

  export type EnumBookingStatusWithAggregatesFilter = {
    equals?: BookingStatus
    in?: Enumerable<BookingStatus>
    notIn?: Enumerable<BookingStatus>
    not?: NestedEnumBookingStatusWithAggregatesFilter | BookingStatus
    _count?: NestedIntFilter
    _min?: NestedEnumBookingStatusFilter
    _max?: NestedEnumBookingStatusFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type EnumFrequencyWithAggregatesFilter = {
    equals?: Frequency
    in?: Enumerable<Frequency>
    notIn?: Enumerable<Frequency>
    not?: NestedEnumFrequencyWithAggregatesFilter | Frequency
    _count?: NestedIntFilter
    _min?: NestedEnumFrequencyFilter
    _max?: NestedEnumFrequencyFilter
  }

  export type BookingCreateNestedManyWithoutTenantInput = {
    create?: XOR<Enumerable<BookingCreateWithoutTenantInput>, Enumerable<BookingUncheckedCreateWithoutTenantInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutTenantInput>
    createMany?: BookingCreateManyTenantInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type PropertyCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<PropertyCreateWithoutOwnerInput>, Enumerable<PropertyUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutOwnerInput>
    createMany?: PropertyCreateManyOwnerInputEnvelope
    connect?: Enumerable<PropertyWhereUniqueInput>
  }

  export type BookingUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<Enumerable<BookingCreateWithoutTenantInput>, Enumerable<BookingUncheckedCreateWithoutTenantInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutTenantInput>
    createMany?: BookingCreateManyTenantInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type PropertyUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<PropertyCreateWithoutOwnerInput>, Enumerable<PropertyUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutOwnerInput>
    createMany?: PropertyCreateManyOwnerInputEnvelope
    connect?: Enumerable<PropertyWhereUniqueInput>
  }

  export type EnumModelKindFieldUpdateOperationsInput = {
    set?: ModelKind
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type BookingUpdateManyWithoutTenantInput = {
    create?: XOR<Enumerable<BookingCreateWithoutTenantInput>, Enumerable<BookingUncheckedCreateWithoutTenantInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutTenantInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutTenantInput>
    createMany?: BookingCreateManyTenantInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutTenantInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutTenantInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type PropertyUpdateManyWithoutOwnerInput = {
    create?: XOR<Enumerable<PropertyCreateWithoutOwnerInput>, Enumerable<PropertyUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<PropertyUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: PropertyCreateManyOwnerInputEnvelope
    set?: Enumerable<PropertyWhereUniqueInput>
    disconnect?: Enumerable<PropertyWhereUniqueInput>
    delete?: Enumerable<PropertyWhereUniqueInput>
    connect?: Enumerable<PropertyWhereUniqueInput>
    update?: Enumerable<PropertyUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<PropertyUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<PropertyScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BookingUncheckedUpdateManyWithoutTenantInput = {
    create?: XOR<Enumerable<BookingCreateWithoutTenantInput>, Enumerable<BookingUncheckedCreateWithoutTenantInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutTenantInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutTenantInput>
    createMany?: BookingCreateManyTenantInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutTenantInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutTenantInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type PropertyUncheckedUpdateManyWithoutOwnerInput = {
    create?: XOR<Enumerable<PropertyCreateWithoutOwnerInput>, Enumerable<PropertyUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<PropertyUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: PropertyCreateManyOwnerInputEnvelope
    set?: Enumerable<PropertyWhereUniqueInput>
    disconnect?: Enumerable<PropertyWhereUniqueInput>
    delete?: Enumerable<PropertyWhereUniqueInput>
    connect?: Enumerable<PropertyWhereUniqueInput>
    update?: Enumerable<PropertyUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<PropertyUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<PropertyScalarWhereInput>
  }

  export type PropertyCreateNestedOneWithoutDaySlotsInput = {
    create?: XOR<PropertyCreateWithoutDaySlotsInput, PropertyUncheckedCreateWithoutDaySlotsInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutDaySlotsInput
    connect?: PropertyWhereUniqueInput
  }

  export type BookingCreateNestedOneWithoutDaySlotsInput = {
    create?: XOR<BookingCreateWithoutDaySlotsInput, BookingUncheckedCreateWithoutDaySlotsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutDaySlotsInput
    connect?: BookingWhereUniqueInput
  }

  export type PropertyUpdateOneRequiredWithoutDaySlotsInput = {
    create?: XOR<PropertyCreateWithoutDaySlotsInput, PropertyUncheckedCreateWithoutDaySlotsInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutDaySlotsInput
    upsert?: PropertyUpsertWithoutDaySlotsInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<PropertyUpdateWithoutDaySlotsInput, PropertyUncheckedUpdateWithoutDaySlotsInput>
  }

  export type BookingUpdateOneWithoutDaySlotsInput = {
    create?: XOR<BookingCreateWithoutDaySlotsInput, BookingUncheckedCreateWithoutDaySlotsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutDaySlotsInput
    upsert?: BookingUpsertWithoutDaySlotsInput
    disconnect?: boolean
    delete?: boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<BookingUpdateWithoutDaySlotsInput, BookingUncheckedUpdateWithoutDaySlotsInput>
  }

  export type UserCreateNestedOneWithoutRentingOutInput = {
    create?: XOR<UserCreateWithoutRentingOutInput, UserUncheckedCreateWithoutRentingOutInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentingOutInput
    connect?: UserWhereUniqueInput
  }

  export type BookingCreateNestedManyWithoutPropertyInput = {
    create?: XOR<Enumerable<BookingCreateWithoutPropertyInput>, Enumerable<BookingUncheckedCreateWithoutPropertyInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutPropertyInput>
    createMany?: BookingCreateManyPropertyInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type PropertyCreaterulesInput = {
    set: Enumerable<string>
  }

  export type PropertyCreateimagesInput = {
    set: Enumerable<string>
  }

  export type DaySlotCreateNestedManyWithoutPropertyInput = {
    create?: XOR<Enumerable<DaySlotCreateWithoutPropertyInput>, Enumerable<DaySlotUncheckedCreateWithoutPropertyInput>>
    connectOrCreate?: Enumerable<DaySlotCreateOrConnectWithoutPropertyInput>
    createMany?: DaySlotCreateManyPropertyInputEnvelope
    connect?: Enumerable<DaySlotWhereUniqueInput>
  }

  export type BookingUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<Enumerable<BookingCreateWithoutPropertyInput>, Enumerable<BookingUncheckedCreateWithoutPropertyInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutPropertyInput>
    createMany?: BookingCreateManyPropertyInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type DaySlotUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<Enumerable<DaySlotCreateWithoutPropertyInput>, Enumerable<DaySlotUncheckedCreateWithoutPropertyInput>>
    connectOrCreate?: Enumerable<DaySlotCreateOrConnectWithoutPropertyInput>
    createMany?: DaySlotCreateManyPropertyInputEnvelope
    connect?: Enumerable<DaySlotWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutRentingOutInput = {
    create?: XOR<UserCreateWithoutRentingOutInput, UserUncheckedCreateWithoutRentingOutInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentingOutInput
    upsert?: UserUpsertWithoutRentingOutInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRentingOutInput, UserUncheckedUpdateWithoutRentingOutInput>
  }

  export type BookingUpdateManyWithoutPropertyInput = {
    create?: XOR<Enumerable<BookingCreateWithoutPropertyInput>, Enumerable<BookingUncheckedCreateWithoutPropertyInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutPropertyInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutPropertyInput>
    createMany?: BookingCreateManyPropertyInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutPropertyInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutPropertyInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type PropertyUpdaterulesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type PropertyUpdateimagesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type DaySlotUpdateManyWithoutPropertyInput = {
    create?: XOR<Enumerable<DaySlotCreateWithoutPropertyInput>, Enumerable<DaySlotUncheckedCreateWithoutPropertyInput>>
    connectOrCreate?: Enumerable<DaySlotCreateOrConnectWithoutPropertyInput>
    upsert?: Enumerable<DaySlotUpsertWithWhereUniqueWithoutPropertyInput>
    createMany?: DaySlotCreateManyPropertyInputEnvelope
    set?: Enumerable<DaySlotWhereUniqueInput>
    disconnect?: Enumerable<DaySlotWhereUniqueInput>
    delete?: Enumerable<DaySlotWhereUniqueInput>
    connect?: Enumerable<DaySlotWhereUniqueInput>
    update?: Enumerable<DaySlotUpdateWithWhereUniqueWithoutPropertyInput>
    updateMany?: Enumerable<DaySlotUpdateManyWithWhereWithoutPropertyInput>
    deleteMany?: Enumerable<DaySlotScalarWhereInput>
  }

  export type BookingUncheckedUpdateManyWithoutPropertyInput = {
    create?: XOR<Enumerable<BookingCreateWithoutPropertyInput>, Enumerable<BookingUncheckedCreateWithoutPropertyInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutPropertyInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutPropertyInput>
    createMany?: BookingCreateManyPropertyInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutPropertyInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutPropertyInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type DaySlotUncheckedUpdateManyWithoutPropertyInput = {
    create?: XOR<Enumerable<DaySlotCreateWithoutPropertyInput>, Enumerable<DaySlotUncheckedCreateWithoutPropertyInput>>
    connectOrCreate?: Enumerable<DaySlotCreateOrConnectWithoutPropertyInput>
    upsert?: Enumerable<DaySlotUpsertWithWhereUniqueWithoutPropertyInput>
    createMany?: DaySlotCreateManyPropertyInputEnvelope
    set?: Enumerable<DaySlotWhereUniqueInput>
    disconnect?: Enumerable<DaySlotWhereUniqueInput>
    delete?: Enumerable<DaySlotWhereUniqueInput>
    connect?: Enumerable<DaySlotWhereUniqueInput>
    update?: Enumerable<DaySlotUpdateWithWhereUniqueWithoutPropertyInput>
    updateMany?: Enumerable<DaySlotUpdateManyWithWhereWithoutPropertyInput>
    deleteMany?: Enumerable<DaySlotScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutBookingsInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    connect?: UserWhereUniqueInput
  }

  export type PropertyCreateNestedOneWithoutBookingsInput = {
    create?: XOR<PropertyCreateWithoutBookingsInput, PropertyUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutBookingsInput
    connect?: PropertyWhereUniqueInput
  }

  export type DaySlotCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<DaySlotCreateWithoutBookingInput>, Enumerable<DaySlotUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<DaySlotCreateOrConnectWithoutBookingInput>
    createMany?: DaySlotCreateManyBookingInputEnvelope
    connect?: Enumerable<DaySlotWhereUniqueInput>
  }

  export type DaySlotUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<DaySlotCreateWithoutBookingInput>, Enumerable<DaySlotUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<DaySlotCreateOrConnectWithoutBookingInput>
    createMany?: DaySlotCreateManyBookingInputEnvelope
    connect?: Enumerable<DaySlotWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutBookingsInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    upsert?: UserUpsertWithoutBookingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type PropertyUpdateOneRequiredWithoutBookingsInput = {
    create?: XOR<PropertyCreateWithoutBookingsInput, PropertyUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutBookingsInput
    upsert?: PropertyUpsertWithoutBookingsInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<PropertyUpdateWithoutBookingsInput, PropertyUncheckedUpdateWithoutBookingsInput>
  }

  export type EnumBookingStatusFieldUpdateOperationsInput = {
    set?: BookingStatus
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DaySlotUpdateManyWithoutBookingInput = {
    create?: XOR<Enumerable<DaySlotCreateWithoutBookingInput>, Enumerable<DaySlotUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<DaySlotCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<DaySlotUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: DaySlotCreateManyBookingInputEnvelope
    set?: Enumerable<DaySlotWhereUniqueInput>
    disconnect?: Enumerable<DaySlotWhereUniqueInput>
    delete?: Enumerable<DaySlotWhereUniqueInput>
    connect?: Enumerable<DaySlotWhereUniqueInput>
    update?: Enumerable<DaySlotUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<DaySlotUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<DaySlotScalarWhereInput>
  }

  export type EnumFrequencyFieldUpdateOperationsInput = {
    set?: Frequency
  }

  export type DaySlotUncheckedUpdateManyWithoutBookingInput = {
    create?: XOR<Enumerable<DaySlotCreateWithoutBookingInput>, Enumerable<DaySlotUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<DaySlotCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<DaySlotUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: DaySlotCreateManyBookingInputEnvelope
    set?: Enumerable<DaySlotWhereUniqueInput>
    disconnect?: Enumerable<DaySlotWhereUniqueInput>
    delete?: Enumerable<DaySlotWhereUniqueInput>
    connect?: Enumerable<DaySlotWhereUniqueInput>
    update?: Enumerable<DaySlotUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<DaySlotUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<DaySlotScalarWhereInput>
  }

  export type NestedEnumModelKindFilter = {
    equals?: ModelKind
    in?: Enumerable<ModelKind>
    notIn?: Enumerable<ModelKind>
    not?: NestedEnumModelKindFilter | ModelKind
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumModelKindWithAggregatesFilter = {
    equals?: ModelKind
    in?: Enumerable<ModelKind>
    notIn?: Enumerable<ModelKind>
    not?: NestedEnumModelKindWithAggregatesFilter | ModelKind
    _count?: NestedIntFilter
    _min?: NestedEnumModelKindFilter
    _max?: NestedEnumModelKindFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumBookingStatusFilter = {
    equals?: BookingStatus
    in?: Enumerable<BookingStatus>
    notIn?: Enumerable<BookingStatus>
    not?: NestedEnumBookingStatusFilter | BookingStatus
  }

  export type NestedEnumFrequencyFilter = {
    equals?: Frequency
    in?: Enumerable<Frequency>
    notIn?: Enumerable<Frequency>
    not?: NestedEnumFrequencyFilter | Frequency
  }

  export type NestedEnumBookingStatusWithAggregatesFilter = {
    equals?: BookingStatus
    in?: Enumerable<BookingStatus>
    notIn?: Enumerable<BookingStatus>
    not?: NestedEnumBookingStatusWithAggregatesFilter | BookingStatus
    _count?: NestedIntFilter
    _min?: NestedEnumBookingStatusFilter
    _max?: NestedEnumBookingStatusFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedEnumFrequencyWithAggregatesFilter = {
    equals?: Frequency
    in?: Enumerable<Frequency>
    notIn?: Enumerable<Frequency>
    not?: NestedEnumFrequencyWithAggregatesFilter | Frequency
    _count?: NestedIntFilter
    _min?: NestedEnumFrequencyFilter
    _max?: NestedEnumFrequencyFilter
  }

  export type BookingCreateWithoutTenantInput = {
    kind?: ModelKind
    id?: string
    property: PropertyCreateNestedOneWithoutBookingsInput
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotCreateNestedManyWithoutBookingInput
    frequency: Frequency
  }

  export type BookingUncheckedCreateWithoutTenantInput = {
    kind?: ModelKind
    id?: string
    propertyId: string
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotUncheckedCreateNestedManyWithoutBookingInput
    frequency: Frequency
  }

  export type BookingCreateOrConnectWithoutTenantInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutTenantInput, BookingUncheckedCreateWithoutTenantInput>
  }

  export type BookingCreateManyTenantInputEnvelope = {
    data: Enumerable<BookingCreateManyTenantInput>
    skipDuplicates?: boolean
  }

  export type PropertyCreateWithoutOwnerInput = {
    kind?: ModelKind
    id?: string
    handle: string
    title: string
    size: number
    bookings?: BookingCreateNestedManyWithoutPropertyInput
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice: number
    serviceFee: number
    rules?: PropertyCreaterulesInput | Enumerable<string>
    deposit: number
    images?: PropertyCreateimagesInput | Enumerable<string>
    partialSpace?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutOwnerInput = {
    kind?: ModelKind
    id?: string
    handle: string
    title: string
    size: number
    bookings?: BookingUncheckedCreateNestedManyWithoutPropertyInput
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice: number
    serviceFee: number
    rules?: PropertyCreaterulesInput | Enumerable<string>
    deposit: number
    images?: PropertyCreateimagesInput | Enumerable<string>
    partialSpace?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutOwnerInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutOwnerInput, PropertyUncheckedCreateWithoutOwnerInput>
  }

  export type PropertyCreateManyOwnerInputEnvelope = {
    data: Enumerable<PropertyCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type BookingUpsertWithWhereUniqueWithoutTenantInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutTenantInput, BookingUncheckedUpdateWithoutTenantInput>
    create: XOR<BookingCreateWithoutTenantInput, BookingUncheckedCreateWithoutTenantInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutTenantInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutTenantInput, BookingUncheckedUpdateWithoutTenantInput>
  }

  export type BookingUpdateManyWithWhereWithoutTenantInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingsInput>
  }

  export type BookingScalarWhereInput = {
    AND?: Enumerable<BookingScalarWhereInput>
    OR?: Enumerable<BookingScalarWhereInput>
    NOT?: Enumerable<BookingScalarWhereInput>
    kind?: EnumModelKindFilter | ModelKind
    id?: StringFilter | string
    tenantId?: StringFilter | string
    propertyId?: StringFilter | string
    bookingStatus?: EnumBookingStatusFilter | BookingStatus
    totalPrice?: FloatFilter | number
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    frequency?: EnumFrequencyFilter | Frequency
  }

  export type PropertyUpsertWithWhereUniqueWithoutOwnerInput = {
    where: PropertyWhereUniqueInput
    update: XOR<PropertyUpdateWithoutOwnerInput, PropertyUncheckedUpdateWithoutOwnerInput>
    create: XOR<PropertyCreateWithoutOwnerInput, PropertyUncheckedCreateWithoutOwnerInput>
  }

  export type PropertyUpdateWithWhereUniqueWithoutOwnerInput = {
    where: PropertyWhereUniqueInput
    data: XOR<PropertyUpdateWithoutOwnerInput, PropertyUncheckedUpdateWithoutOwnerInput>
  }

  export type PropertyUpdateManyWithWhereWithoutOwnerInput = {
    where: PropertyScalarWhereInput
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyWithoutRentingOutInput>
  }

  export type PropertyScalarWhereInput = {
    AND?: Enumerable<PropertyScalarWhereInput>
    OR?: Enumerable<PropertyScalarWhereInput>
    NOT?: Enumerable<PropertyScalarWhereInput>
    kind?: EnumModelKindFilter | ModelKind
    id?: StringFilter | string
    handle?: StringFilter | string
    title?: StringFilter | string
    size?: IntFilter | number
    ownerId?: StringFilter | string
    street?: StringFilter | string
    streetNumber?: StringFilter | string
    zip?: IntFilter | number
    city?: StringFilter | string
    description?: StringFilter | string
    pickup?: BoolFilter | boolean
    isVerified?: BoolFilter | boolean
    hourlyPrice?: IntFilter | number
    serviceFee?: IntFilter | number
    rules?: StringNullableListFilter
    deposit?: IntFilter | number
    images?: StringNullableListFilter
    partialSpace?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PropertyCreateWithoutDaySlotsInput = {
    kind?: ModelKind
    id?: string
    handle: string
    title: string
    size: number
    owner: UserCreateNestedOneWithoutRentingOutInput
    bookings?: BookingCreateNestedManyWithoutPropertyInput
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice: number
    serviceFee: number
    rules?: PropertyCreaterulesInput | Enumerable<string>
    deposit: number
    images?: PropertyCreateimagesInput | Enumerable<string>
    partialSpace?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyUncheckedCreateWithoutDaySlotsInput = {
    kind?: ModelKind
    id?: string
    handle: string
    title: string
    size: number
    ownerId: string
    bookings?: BookingUncheckedCreateNestedManyWithoutPropertyInput
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice: number
    serviceFee: number
    rules?: PropertyCreaterulesInput | Enumerable<string>
    deposit: number
    images?: PropertyCreateimagesInput | Enumerable<string>
    partialSpace?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyCreateOrConnectWithoutDaySlotsInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutDaySlotsInput, PropertyUncheckedCreateWithoutDaySlotsInput>
  }

  export type BookingCreateWithoutDaySlotsInput = {
    kind?: ModelKind
    id?: string
    tenant: UserCreateNestedOneWithoutBookingsInput
    property: PropertyCreateNestedOneWithoutBookingsInput
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    frequency: Frequency
  }

  export type BookingUncheckedCreateWithoutDaySlotsInput = {
    kind?: ModelKind
    id?: string
    tenantId: string
    propertyId: string
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    frequency: Frequency
  }

  export type BookingCreateOrConnectWithoutDaySlotsInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutDaySlotsInput, BookingUncheckedCreateWithoutDaySlotsInput>
  }

  export type PropertyUpsertWithoutDaySlotsInput = {
    update: XOR<PropertyUpdateWithoutDaySlotsInput, PropertyUncheckedUpdateWithoutDaySlotsInput>
    create: XOR<PropertyCreateWithoutDaySlotsInput, PropertyUncheckedCreateWithoutDaySlotsInput>
  }

  export type PropertyUpdateWithoutDaySlotsInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    owner?: UserUpdateOneRequiredWithoutRentingOutInput
    bookings?: BookingUpdateManyWithoutPropertyInput
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUncheckedUpdateWithoutDaySlotsInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    bookings?: BookingUncheckedUpdateManyWithoutPropertyInput
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingUpsertWithoutDaySlotsInput = {
    update: XOR<BookingUpdateWithoutDaySlotsInput, BookingUncheckedUpdateWithoutDaySlotsInput>
    create: XOR<BookingCreateWithoutDaySlotsInput, BookingUncheckedCreateWithoutDaySlotsInput>
  }

  export type BookingUpdateWithoutDaySlotsInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    tenant?: UserUpdateOneRequiredWithoutBookingsInput
    property?: PropertyUpdateOneRequiredWithoutBookingsInput
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type BookingUncheckedUpdateWithoutDaySlotsInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    propertyId?: StringFieldUpdateOperationsInput | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type UserCreateWithoutRentingOutInput = {
    kind?: ModelKind
    handle: string
    fullName: string
    stripeId?: string | null
    email: string
    id?: string
    image?: string | null
    dob?: Date | string | null
    zip?: number | null
    description?: string | null
    isVerified?: boolean
    role: Role
    bookings?: BookingCreateNestedManyWithoutTenantInput
    superOwner?: boolean
    passportS3Id?: string | null
    passportVerified?: boolean
    licenseS3Id?: string | null
    licenseVerified?: boolean
    solvencyS3Id?: string | null
    solvencyVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutRentingOutInput = {
    kind?: ModelKind
    handle: string
    fullName: string
    stripeId?: string | null
    email: string
    id?: string
    image?: string | null
    dob?: Date | string | null
    zip?: number | null
    description?: string | null
    isVerified?: boolean
    role: Role
    bookings?: BookingUncheckedCreateNestedManyWithoutTenantInput
    superOwner?: boolean
    passportS3Id?: string | null
    passportVerified?: boolean
    licenseS3Id?: string | null
    licenseVerified?: boolean
    solvencyS3Id?: string | null
    solvencyVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutRentingOutInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRentingOutInput, UserUncheckedCreateWithoutRentingOutInput>
  }

  export type BookingCreateWithoutPropertyInput = {
    kind?: ModelKind
    id?: string
    tenant: UserCreateNestedOneWithoutBookingsInput
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotCreateNestedManyWithoutBookingInput
    frequency: Frequency
  }

  export type BookingUncheckedCreateWithoutPropertyInput = {
    kind?: ModelKind
    id?: string
    tenantId: string
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotUncheckedCreateNestedManyWithoutBookingInput
    frequency: Frequency
  }

  export type BookingCreateOrConnectWithoutPropertyInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutPropertyInput, BookingUncheckedCreateWithoutPropertyInput>
  }

  export type BookingCreateManyPropertyInputEnvelope = {
    data: Enumerable<BookingCreateManyPropertyInput>
    skipDuplicates?: boolean
  }

  export type DaySlotCreateWithoutPropertyInput = {
    kind?: ModelKind
    id?: string
    startTime: Date | string
    endTime: Date | string
    bookedStartTime?: Date | string | null
    bookedEndTime?: Date | string | null
    booking?: BookingCreateNestedOneWithoutDaySlotsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DaySlotUncheckedCreateWithoutPropertyInput = {
    kind?: ModelKind
    id?: string
    startTime: Date | string
    endTime: Date | string
    bookedStartTime?: Date | string | null
    bookedEndTime?: Date | string | null
    bookingId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DaySlotCreateOrConnectWithoutPropertyInput = {
    where: DaySlotWhereUniqueInput
    create: XOR<DaySlotCreateWithoutPropertyInput, DaySlotUncheckedCreateWithoutPropertyInput>
  }

  export type DaySlotCreateManyPropertyInputEnvelope = {
    data: Enumerable<DaySlotCreateManyPropertyInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRentingOutInput = {
    update: XOR<UserUpdateWithoutRentingOutInput, UserUncheckedUpdateWithoutRentingOutInput>
    create: XOR<UserCreateWithoutRentingOutInput, UserUncheckedCreateWithoutRentingOutInput>
  }

  export type UserUpdateWithoutRentingOutInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    handle?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zip?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    bookings?: BookingUpdateManyWithoutTenantInput
    superOwner?: BoolFieldUpdateOperationsInput | boolean
    passportS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    passportVerified?: BoolFieldUpdateOperationsInput | boolean
    licenseS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    licenseVerified?: BoolFieldUpdateOperationsInput | boolean
    solvencyS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    solvencyVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutRentingOutInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    handle?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zip?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    bookings?: BookingUncheckedUpdateManyWithoutTenantInput
    superOwner?: BoolFieldUpdateOperationsInput | boolean
    passportS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    passportVerified?: BoolFieldUpdateOperationsInput | boolean
    licenseS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    licenseVerified?: BoolFieldUpdateOperationsInput | boolean
    solvencyS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    solvencyVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingUpsertWithWhereUniqueWithoutPropertyInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutPropertyInput, BookingUncheckedUpdateWithoutPropertyInput>
    create: XOR<BookingCreateWithoutPropertyInput, BookingUncheckedCreateWithoutPropertyInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutPropertyInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutPropertyInput, BookingUncheckedUpdateWithoutPropertyInput>
  }

  export type BookingUpdateManyWithWhereWithoutPropertyInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingsInput>
  }

  export type DaySlotUpsertWithWhereUniqueWithoutPropertyInput = {
    where: DaySlotWhereUniqueInput
    update: XOR<DaySlotUpdateWithoutPropertyInput, DaySlotUncheckedUpdateWithoutPropertyInput>
    create: XOR<DaySlotCreateWithoutPropertyInput, DaySlotUncheckedCreateWithoutPropertyInput>
  }

  export type DaySlotUpdateWithWhereUniqueWithoutPropertyInput = {
    where: DaySlotWhereUniqueInput
    data: XOR<DaySlotUpdateWithoutPropertyInput, DaySlotUncheckedUpdateWithoutPropertyInput>
  }

  export type DaySlotUpdateManyWithWhereWithoutPropertyInput = {
    where: DaySlotScalarWhereInput
    data: XOR<DaySlotUpdateManyMutationInput, DaySlotUncheckedUpdateManyWithoutDaySlotsInput>
  }

  export type DaySlotScalarWhereInput = {
    AND?: Enumerable<DaySlotScalarWhereInput>
    OR?: Enumerable<DaySlotScalarWhereInput>
    NOT?: Enumerable<DaySlotScalarWhereInput>
    kind?: EnumModelKindFilter | ModelKind
    id?: StringFilter | string
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    bookedStartTime?: DateTimeNullableFilter | Date | string | null
    bookedEndTime?: DateTimeNullableFilter | Date | string | null
    propertyId?: StringFilter | string
    bookingId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutBookingsInput = {
    kind?: ModelKind
    handle: string
    fullName: string
    stripeId?: string | null
    email: string
    id?: string
    image?: string | null
    dob?: Date | string | null
    zip?: number | null
    description?: string | null
    isVerified?: boolean
    role: Role
    rentingOut?: PropertyCreateNestedManyWithoutOwnerInput
    superOwner?: boolean
    passportS3Id?: string | null
    passportVerified?: boolean
    licenseS3Id?: string | null
    licenseVerified?: boolean
    solvencyS3Id?: string | null
    solvencyVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutBookingsInput = {
    kind?: ModelKind
    handle: string
    fullName: string
    stripeId?: string | null
    email: string
    id?: string
    image?: string | null
    dob?: Date | string | null
    zip?: number | null
    description?: string | null
    isVerified?: boolean
    role: Role
    rentingOut?: PropertyUncheckedCreateNestedManyWithoutOwnerInput
    superOwner?: boolean
    passportS3Id?: string | null
    passportVerified?: boolean
    licenseS3Id?: string | null
    licenseVerified?: boolean
    solvencyS3Id?: string | null
    solvencyVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutBookingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
  }

  export type PropertyCreateWithoutBookingsInput = {
    kind?: ModelKind
    id?: string
    handle: string
    title: string
    size: number
    owner: UserCreateNestedOneWithoutRentingOutInput
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice: number
    serviceFee: number
    rules?: PropertyCreaterulesInput | Enumerable<string>
    deposit: number
    images?: PropertyCreateimagesInput | Enumerable<string>
    partialSpace?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutBookingsInput = {
    kind?: ModelKind
    id?: string
    handle: string
    title: string
    size: number
    ownerId: string
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice: number
    serviceFee: number
    rules?: PropertyCreaterulesInput | Enumerable<string>
    deposit: number
    images?: PropertyCreateimagesInput | Enumerable<string>
    partialSpace?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    daySlots?: DaySlotUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutBookingsInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutBookingsInput, PropertyUncheckedCreateWithoutBookingsInput>
  }

  export type DaySlotCreateWithoutBookingInput = {
    kind?: ModelKind
    id?: string
    startTime: Date | string
    endTime: Date | string
    bookedStartTime?: Date | string | null
    bookedEndTime?: Date | string | null
    property: PropertyCreateNestedOneWithoutDaySlotsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DaySlotUncheckedCreateWithoutBookingInput = {
    kind?: ModelKind
    id?: string
    startTime: Date | string
    endTime: Date | string
    bookedStartTime?: Date | string | null
    bookedEndTime?: Date | string | null
    propertyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DaySlotCreateOrConnectWithoutBookingInput = {
    where: DaySlotWhereUniqueInput
    create: XOR<DaySlotCreateWithoutBookingInput, DaySlotUncheckedCreateWithoutBookingInput>
  }

  export type DaySlotCreateManyBookingInputEnvelope = {
    data: Enumerable<DaySlotCreateManyBookingInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBookingsInput = {
    update: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
  }

  export type UserUpdateWithoutBookingsInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    handle?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zip?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    rentingOut?: PropertyUpdateManyWithoutOwnerInput
    superOwner?: BoolFieldUpdateOperationsInput | boolean
    passportS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    passportVerified?: BoolFieldUpdateOperationsInput | boolean
    licenseS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    licenseVerified?: BoolFieldUpdateOperationsInput | boolean
    solvencyS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    solvencyVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutBookingsInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    handle?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zip?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    rentingOut?: PropertyUncheckedUpdateManyWithoutOwnerInput
    superOwner?: BoolFieldUpdateOperationsInput | boolean
    passportS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    passportVerified?: BoolFieldUpdateOperationsInput | boolean
    licenseS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    licenseVerified?: BoolFieldUpdateOperationsInput | boolean
    solvencyS3Id?: NullableStringFieldUpdateOperationsInput | string | null
    solvencyVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUpsertWithoutBookingsInput = {
    update: XOR<PropertyUpdateWithoutBookingsInput, PropertyUncheckedUpdateWithoutBookingsInput>
    create: XOR<PropertyCreateWithoutBookingsInput, PropertyUncheckedCreateWithoutBookingsInput>
  }

  export type PropertyUpdateWithoutBookingsInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    owner?: UserUpdateOneRequiredWithoutRentingOutInput
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUpdateManyWithoutPropertyInput
  }

  export type PropertyUncheckedUpdateWithoutBookingsInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUncheckedUpdateManyWithoutPropertyInput
  }

  export type DaySlotUpsertWithWhereUniqueWithoutBookingInput = {
    where: DaySlotWhereUniqueInput
    update: XOR<DaySlotUpdateWithoutBookingInput, DaySlotUncheckedUpdateWithoutBookingInput>
    create: XOR<DaySlotCreateWithoutBookingInput, DaySlotUncheckedCreateWithoutBookingInput>
  }

  export type DaySlotUpdateWithWhereUniqueWithoutBookingInput = {
    where: DaySlotWhereUniqueInput
    data: XOR<DaySlotUpdateWithoutBookingInput, DaySlotUncheckedUpdateWithoutBookingInput>
  }

  export type DaySlotUpdateManyWithWhereWithoutBookingInput = {
    where: DaySlotScalarWhereInput
    data: XOR<DaySlotUpdateManyMutationInput, DaySlotUncheckedUpdateManyWithoutDaySlotsInput>
  }

  export type BookingCreateManyTenantInput = {
    kind?: ModelKind
    id?: string
    propertyId: string
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    frequency: Frequency
  }

  export type PropertyCreateManyOwnerInput = {
    kind?: ModelKind
    id?: string
    handle: string
    title: string
    size: number
    street: string
    streetNumber: string
    zip: number
    city: string
    description: string
    pickup?: boolean
    isVerified?: boolean
    hourlyPrice: number
    serviceFee: number
    rules?: PropertyCreaterulesInput | Enumerable<string>
    deposit: number
    images?: PropertyCreateimagesInput | Enumerable<string>
    partialSpace?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingUpdateWithoutTenantInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    property?: PropertyUpdateOneRequiredWithoutBookingsInput
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUpdateManyWithoutBookingInput
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type BookingUncheckedUpdateWithoutTenantInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    propertyId?: StringFieldUpdateOperationsInput | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUncheckedUpdateManyWithoutBookingInput
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type BookingUncheckedUpdateManyWithoutBookingsInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    propertyId?: StringFieldUpdateOperationsInput | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type PropertyUpdateWithoutOwnerInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    bookings?: BookingUpdateManyWithoutPropertyInput
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUpdateManyWithoutPropertyInput
  }

  export type PropertyUncheckedUpdateWithoutOwnerInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    bookings?: BookingUncheckedUpdateManyWithoutPropertyInput
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUncheckedUpdateManyWithoutPropertyInput
  }

  export type PropertyUncheckedUpdateManyWithoutRentingOutInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    handle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pickup?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    serviceFee?: IntFieldUpdateOperationsInput | number
    rules?: PropertyUpdaterulesInput | Enumerable<string>
    deposit?: IntFieldUpdateOperationsInput | number
    images?: PropertyUpdateimagesInput | Enumerable<string>
    partialSpace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCreateManyPropertyInput = {
    kind?: ModelKind
    id?: string
    tenantId: string
    bookingStatus: BookingStatus
    totalPrice?: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    frequency: Frequency
  }

  export type DaySlotCreateManyPropertyInput = {
    kind?: ModelKind
    id?: string
    startTime: Date | string
    endTime: Date | string
    bookedStartTime?: Date | string | null
    bookedEndTime?: Date | string | null
    bookingId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingUpdateWithoutPropertyInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    tenant?: UserUpdateOneRequiredWithoutBookingsInput
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUpdateManyWithoutBookingInput
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type BookingUncheckedUpdateWithoutPropertyInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    totalPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    daySlots?: DaySlotUncheckedUpdateManyWithoutBookingInput
    frequency?: EnumFrequencyFieldUpdateOperationsInput | Frequency
  }

  export type DaySlotUpdateWithoutPropertyInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    bookedStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookedEndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking?: BookingUpdateOneWithoutDaySlotsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DaySlotUncheckedUpdateWithoutPropertyInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    bookedStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookedEndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DaySlotUncheckedUpdateManyWithoutDaySlotsInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    bookedStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookedEndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DaySlotCreateManyBookingInput = {
    kind?: ModelKind
    id?: string
    startTime: Date | string
    endTime: Date | string
    bookedStartTime?: Date | string | null
    bookedEndTime?: Date | string | null
    propertyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DaySlotUpdateWithoutBookingInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    bookedStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookedEndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    property?: PropertyUpdateOneRequiredWithoutDaySlotsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DaySlotUncheckedUpdateWithoutBookingInput = {
    kind?: EnumModelKindFieldUpdateOperationsInput | ModelKind
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    bookedStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bookedEndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    propertyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}