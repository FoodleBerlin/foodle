
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.15.2
 * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
 */
Prisma.prismaVersion = {
  client: "3.15.2",
  engine: "461d6a05159055555eb7dfb337c9fb271cbd4d7e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  kind: 'kind',
  handle: 'handle',
  fullName: 'fullName',
  stripeId: 'stripeId',
  email: 'email',
  id: 'id',
  image: 'image',
  dob: 'dob',
  zip: 'zip',
  description: 'description',
  isVerified: 'isVerified',
  role: 'role',
  superOwner: 'superOwner',
  passportS3Id: 'passportS3Id',
  passportVerified: 'passportVerified',
  licenseS3Id: 'licenseS3Id',
  licenseVerified: 'licenseVerified',
  solvencyS3Id: 'solvencyS3Id',
  solvencyVerified: 'solvencyVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.DaySlotScalarFieldEnum = makeEnum({
  kind: 'kind',
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  bookedStartTime: 'bookedStartTime',
  bookedEndTime: 'bookedEndTime',
  propertyId: 'propertyId',
  bookingId: 'bookingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.PropertyScalarFieldEnum = makeEnum({
  kind: 'kind',
  id: 'id',
  handle: 'handle',
  title: 'title',
  size: 'size',
  ownerId: 'ownerId',
  street: 'street',
  streetNumber: 'streetNumber',
  zip: 'zip',
  city: 'city',
  description: 'description',
  pickup: 'pickup',
  isVerified: 'isVerified',
  hourlyPrice: 'hourlyPrice',
  serviceFee: 'serviceFee',
  rules: 'rules',
  deposit: 'deposit',
  images: 'images',
  partialSpace: 'partialSpace',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.BookingScalarFieldEnum = makeEnum({
  kind: 'kind',
  id: 'id',
  tenantId: 'tenantId',
  propertyId: 'propertyId',
  bookingStatus: 'bookingStatus',
  totalPrice: 'totalPrice',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  frequency: 'frequency'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.ModelKind = makeEnum({
  user: 'user',
  property: 'property',
  booking: 'booking',
  bookingDay: 'bookingDay',
  propertyAvailability: 'propertyAvailability',
  payment: 'payment',
  paymentMethod: 'paymentMethod',
  daySlot: 'daySlot'
});

exports.Role = makeEnum({
  tenant: 'tenant',
  landlord: 'landlord',
  tenantLandlord: 'tenantLandlord'
});

exports.BookingStatus = makeEnum({
  accepted: 'accepted',
  pending: 'pending',
  rejected: 'rejected'
});

exports.Frequency = makeEnum({
  none: 'none',
  weekly: 'weekly',
  monthly: 'monthly'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  DaySlot: 'DaySlot',
  Property: 'Property',
  Booking: 'Booking'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
